[{"content":"1. AdGuard: Reklamsız Gezinti İçin Nihai Çözümünüz İnternette gezinirken sürekli karşınıza çıkan reklam ve açılır pencerelerinden sıkıldıysanız, AdGuard Windows uygulamasını kullanmayı düşünebilirsiniz. AdGuard, yalnızca reklamları kaldırmakla kalmayıp aynı zamanda bilgisayarınızı kötü amaçlı yazılımlardan ve kimlik avı saldırılarından koruyan güçlü bir reklam engelleyicidir. Tanıdığınız ve bildiğiniz tüm reklamlara son kez sarılın artık onları bir daha göremeyeceksiniz. Çünkü bu blog gönderisinde, AdGuard\u0026rsquo;ın özelliklerini ve göz atma deneyiminizi nasıl geliştirebileceğini keşfedeceğiz.\n1.1 AdGuard Uygulamasının Özellikleri 1.1.1 Reklam engelleyici AdGuard\u0026rsquo;ın birincil özelliği, banner reklamlar, açılır pencereler ve video reklamlar dahil olmak üzere her türlü reklamı1 web sayfalarından kaldırabilen reklam engelleyicisidir. Bu özellik yalnızca gezinmeyi hızlandırmakla kalmaz, aynı zamanda verilerden tasarruf etmenizi sağlar ve göz yorgunluğunu azaltır. 1.1.2 Gizlilik koruması AdGuard, web sitelerinin verilerinizi toplamak için kullandığı izleme çerezlerini ve diğer izleme mekanizmalarını engelleyerek gizliliğinizi korur. Ayrıca, IP adresinizi ve diğer hassas bilgileri web sitelerinden gizleyen Gizli mod adı verilen bir özelliği de vardır. 1.1.3 Ebeveyn Kontrolü AdGuard, yetişkinlere uygun içerik veya diğer uygunsuz materyaller barındıran web sitelerine erişimi engellemenizi sağlayan bir ebeveyn denetimi özelliğine sahiptir. Belirli web sitelerini veya kategorileri engellemek için özel kurallar da oluşturabilirsiniz. 1.1.4 Malware koruması AdGuard, kötü amaçlı kod veya bağlantılar içeren web sitelerini engelleyen yerleşik bir kötü amaçlı yazılımdan koruma özelliğine sahiptir. Ayrıca tehlikeli olduğu bildirilen bir web sitesini ziyaret ettiğinizde sizi uyarabilir. 1.1.5 Özelleştirilebilir Filtreler AdGuard, belirli içerik türlerini veya web sitelerini engellemek için kendi filtrelerinizi oluşturmanıza veya diğer kullanıcılardan filtreler eklemenize olanak tanır. Bu özellik, gördükleriniz ve görmedikleriniz üzerinde tam kontrol sahibi olmanızı sağlar. 1.1.6 Kullanıcı dostu arayüz AdGuard, en acemi kullanıcılar için bile kullanımı kolaylaştıran basit ve sezgisel bir arayüze sahiptir. Tüm özelliklere ve ayarlara ana panodan kolayca erişebilirsiniz. \u0026gt; 1.1.7 Kısa Özet (TL;DR)2 AdGuard karşınıza çıkan reklamları engellerken aynı zamanda da kullanıcı dostu arayüzü ve özelleştirilebilir filtreleri sayesinde gizliliğinizi de korur. Ebeveyn kontrolü ve Malware koruması sayesinde ise istenmeyen sonuçlara karşı hazırlıklı olursunuz.\n1.2 Neden AdGuard\u0026rsquo;ı Seçmelisiniz? AdGuard, gelişmiş özellikleri ve kullanımı kolay arayüzü nedeniyle Windows için mevcut olan en iyi reklam engelleyicilerden biridir. İşte AdGuard\u0026rsquo;ı seçmeniz için bazı nedenler:\n1.2.1 Kapsamlı Reklam Engelleme AdGuard, pop-up\u0026rsquo;lar, video reklamlar ve banner reklamlar dahil her türlü reklamı1 engelleyerek tarama deneyiminizi daha akıcı ve hızlı hale getirebilir. 1.2.2 Gelişmiş Gizlilik Koruması AdGuard yalnızca reklamları engellemekle kalmaz, izleme çerezlerini engelleyerek ve IP adresinizi gizleyerek gizliliğinizi de korur. 1.2.3 Malware koruması AdGuard\u0026rsquo;ın kötü amaçlı yazılımdan koruma özelliği, sizi kötü amaçlı web sitelerinden korur ve tehlikeli bir siteyi ziyaret ettiğinizde sizi uyarır. 1.2.4 Özelleştirilebilir Filtreler AdGuard\u0026rsquo;ın özelleştirilebilir filtreleri, size hangi içeriği görüp neyi görmediğiniz konusunda tam kontrol sağlar. 1.2.5 Kullanımı Kolay Arayüz AdGuard\u0026rsquo;ın kullanıcı dostu arayüzü, teknik uzmanlıkları ne olursa olsun tüm kullanıcılar için kullanımı kolaylaştırır. \u0026gt; 1.2.6 Kısa Özet (TL;DR) 2 AdGuard diğer reklam engelleme yazılımları ve çözümlerinden daha gelişmiş ve hızlı bir çözüme sahiptir. Ayrıca diğer yazılımlarda olmayan Malware koruması ve Gelişmiş Gizlilik özelliklerine de sahiptir.\n2. AdGuard Windows Uygulaması Nasıl Kurulur AdGuard, bilgisayarınızı kötü amaçlı yazılımlardan ve kimlik avı saldırılarından koruyabilen ve aynı zamanda web sayfalarından her türlü reklamı1 kaldırabilen güçlü bir reklam engelleyicidir. Reklamsız bir tarama deneyimi yaşamak istiyorsanız, AdGuard\u0026rsquo;ı Windows PC\u0026rsquo;nize yüklemek kolay ve kolaydır. Bu blog gönderisinde, AdGuard\u0026rsquo;ı Windows PC\u0026rsquo;nize yükleme adımlarında size rehberlik edeceğiz.\n2.1 Adım Adım Kılavuz 2.1.1 AdGuard Yükleyiciyi İndirin AdGuard\u0026rsquo;ı Windows PC\u0026rsquo;nize kurmanın ilk adımı, AdGuard yükleyicisini resmi web sitesinden indirmektir. AdGuard web sitesindeki \u0026ldquo;İndir\u0026rdquo; düğmesine tıklayarak yükleyiciyi indirebilirsiniz.\nhttps://adguard.com/tr/adguard-windows/overview.html (Erişim Tarihi 07.04.2023) 2.1.2 Yükleyiciyi Çalıştırın AdGuard yükleyicisini indirdikten sonra, PC\u0026rsquo;nizde dosyayı bulun ve yükleyiciyi çalıştırmak için üzerine çift tıklayın. Kullanıcı Hesabı Denetimi (UAC) tarafından istenirse, yükleyiciye PC\u0026rsquo;nizde değişiklik yapması için izin vermeniz gerekebilir.\nAdguard Windows uygulaması yükleyici görüntüleri 2.1.3 Kurulum Seçeneklerini Seçin Bir sonraki adım, AdGuard için kurulum seçeneklerini seçmektir. AdGuard\u0026rsquo;ı tüm kullanıcılar için veya yalnızca mevcut kullanıcı için yüklemeyi seçebilirsiniz. Ayrıca kurulum klasörünü seçebilir ve bir masaüstü kısayolu oluşturabilirsiniz.\nAdguard Windows uygulaması kurulum seçenekleri 2.1.4 AdGuard\u0026rsquo;ı yükleyin Kurulum seçeneklerini seçtikten sonra, kurulum sürecini başlatmak için \u0026ldquo;Yükle\u0026rdquo; düğmesine tıklayın. Yükleme işlemi bilgisayarınızın hızına bağlı olarak birkaç dakika sürebilir.\nAdguard Windows uygulaması kurulum görüntüleri 2.1.5 AdGuard\u0026rsquo;ı başlatın Yükleme tamamlandıktan sonra, AdGuard\u0026rsquo;ı masaüstü kısayolundan veya Başlat menüsünden başlatabilirsiniz. AdGuard\u0026rsquo;ı ilk kez başlattığınızda, ayarları tercihlerinize göre yapılandırmanızı isteyecektir.\nAdguard Windows uygulaması genel ayarları 2.1.6 Reklamsız Taramanın Keyfini Çıkarın AdGuard\u0026rsquo;ın ayarlarını yapılandırdıktan sonra, reklamsız bir göz atma deneyiminin keyfini çıkarabilirsiniz. AdGuard, web sayfalarından her türlü reklamı1 otomatik olarak kaldırarak gezinmenizi daha hızlı ve sorunsuz hale getirir.\nhttps://www.youtube.com/watch?v=YW9Ojcm1Gkg (Erişim Tarihi 07.04.2023) \u0026gt; 2.1.7 Kısa Özet Sistem admini iseniz veya herhangi bir ayar ile uğraşmaadan direk kurmak istiyorsanız Msiexec /q /i AdGuard.msi komutunu kullanabilirsiniz.\nAlternatif olarak da halk arasında \u0026ldquo;Next \u0026gt; Next \u0026gt; Next\u0026rdquo; tabir edilen yöntemi kullanabilirsiniz. Yani kapattım gözlerimi karanlığa, açtım ellerimi sonsuzluğa, rabbim sonum hayrola :D diyerek her gelen sayfada hiçbir şeyi okumadan İleri/Next butonuna tıklayarak çok hızlı bir şekilde kurabilirsiniz.\n3. AdGuard Nasıl Çalışıyor? AdGuard, dünya çapında milyonlarca kullanıcının güvendiği güçlü bir reklam engelleyicidir. Reklamları engelleme yollarından biri, DNS tabanlı engelleme teknikleri kullanmaktır. Bu blog gönderisinde, AdGuard\u0026rsquo;ın DNS, DNS-over-HTTPS (DoH) ve diğer teknikleri kullanarak reklamları nasıl engellediğini keşfedeceğiz.\n3.1 DNS Tabanlı Engelleme DNS tabanlı engelleme, AdGuard tarafından reklamları DNS isteklerini kara listeye alınmış bir IP adresine yönlendirerek engellemek için kullanılan bir tekniktir. Bir web sitesini ziyaret ettiğinizde, tarayıcınız, web sitesinin alan adını bir IP adresine çevirmek için bir DNS sunucusuna bir DNS isteği gönderir. AdGuard bu isteği yakalar ve kara listesine göre kontrol eder. Alan kara listedeyse AdGuard, isteği kara listedeki bir IP adresine yönlendirerek reklamın ekranınızda görüntülenmesini etkili bir şekilde engeller.\nDNS filtresi, reklamları daha bilgisayarınıza yüklenmelerine fırsat vermeden engelleyerek zamandan ve bant genişliğinden tasarruf etmenizi sağladığı için oldukça etkilidir. AdGuard\u0026rsquo;ın DNS filtresi de son derece özelleştirilebilir olup, kullanıcıların gerektiğinde belirli alanları beyaz listeye veya kara listeye almasına olanak tanır. DNS tabanlı engelleme, reklamları engellemenin basit ve etkili bir yoludur, ancak bazı sınırlamaları vardır. Örneğin, bazı reklamlar, standart olmayan bağlantı noktaları veya şifreli bağlantılar kullanarak DNS engellemesini atlayabilir.\n3.2 HTTPS filtresi HTTPS filtresi, AdGuard\u0026rsquo;ın bir başka önemli özelliğidir ve HTTPS şifrelemesi kullanan web sitelerindeki istenmeyen içeriği filtreleyerek çalışır. Birçok reklam engelleme aracı, şifreleme web sitesinin içeriğini görmelerini engellediği için HTTPS web sitelerindeki reklamları engellemekte zorlanır. Ancak, AdGuard\u0026rsquo;ın HTTPS filtresi, web sitesinin içeriğinin şifresini çözebilir ve istenmeyen reklamları veya diğer içeriği filtreleyebilir.\nHTTPS filtresi, daha fazla web sitesi gelişmiş güvenlik için HTTPS\u0026rsquo;ye geçtikçe giderek yaygınlaşan HTTPS şifrelemesi kullanan web sitelerindeki reklamları engellemede oldukça etkilidir. AdGuard\u0026rsquo;ın HTTPS filtresi de son derece özelleştirilebilir ve kullanıcıların belirli web sitelerini veya etki alanlarını beyaz veya kara listeye almasına olanak tanır.\n3.3 İçerik filtresi İçerik filtresi, AdGuard\u0026rsquo;ın bir diğer önemli özelliğidir ve web sitelerindeki istenmeyen içeriği filtreleyerek çalışır. Buna, kullanıcıların dikkatini dağıtabilecek veya rahatsız edebilecek reklamlar, açılır pencereler, Cookie (Çerez) uyarı bildirimleri, afişler ve diğer istenmeyen içerik türleri dahildir.\nİçerik filtresi, tüm etki alanlarını veya IP adreslerini engellemek yerine bir web sitesindeki belirli öğeleri hedef aldığı için oldukça etkilidir. Bu, kullanıcıların istenmeyen içerikle bombardımana tutulmadan daha akıcı bir tarama deneyiminin keyfini çıkarmasına olanak tanır. AdGuard\u0026rsquo;ın İçerik filtresi de son derece özelleştirilebilir ve kullanıcıların belirli web sitelerini veya etki alanlarını beyaz veya kara listeye almasına olanak tanır.\n\u0026gt; 3.4 Kısa Özet (TL;DR) 2 https://adguard.com/tr/adguard-windows/overview.html (Erişim Tarihi: 07.04.2023) 4. DNS ile ilgili Gelişmiş Ayalar DNS (Alan Adı Sistemi), insanlar tarafından okunabilen alan adlarını bilgisayarların anlayabileceği IP adreslerine çevirmek için kullanılan bir protokoldür. Ancak, DNS sorguları normal olarak 53 numaralı port üzerinden gönderilir ve herhangi bir şifreleme yapılmaz. Dolayısıyla varsayılan olarak güvenli değildir ve DNS sorguları saldırganlar tarafından ele geçirilebilir veya manipüle edilebilir.\nhttps://blog.chromium.org/2020/05/a-safer-and-more-private-browsing-DoH.html (Erişim Tarihi: 07.04.2023) Bu sorunu çözmek için HTTPS üzerinden DNS (DoH), TLS üzerinden DNS (DoT), QUIC üzerinden DNS (DoQ) ve DNSCrypt dahil olmak üzere birkaç yeni protokol geliştirilmiştir. Blog gönderisinin bu kısmında, bu protokoller arasındaki farkları ve DNS sorgularınızı korumaya nasıl yardımcı olabileceklerini tartışacağız. DNS-over-HTTPS (DoH), DNS-over-TLS (DoT), DNS-over-QUIC (DoQ) ve DNSCrypt birçok avantaj sağlarken, dikkate alınması gereken bazı potansiyel dezavantajlar da vardır. 3\n4.1 HTTPS üzerinden DNS (DoH) DNS-over-HTTPS (DoH), HTTPS protokolünü kullanarak DNS sorgularını şifreleyen bir protokoldür. DoH, üçüncü tarafların DNS sorgularına müdahale etmesini ve kurcalamasını önleyerek gizliliği ve güvenliği artırmak için tasarlanmıştır. DoH ile, DNS sorguları şifrelenmiş bir kanal üzerinden gönderilerek saldırganların bunları yakalamasını ve manipüle etmesini zorlaştırır.\nDoH, Firefox, Chrome ve Edge dahil olmak üzere birçok büyük web tarayıcısı tarafından desteklenir. Bir DoH uygulaması yükleyerek veya cihazınızı bir DoH sunucusu kullanacak şekilde yapılandırarak mobil cihazlarda da kullanılabilir.\nhttps://blog.chromium.org/2020/05/a-safer-and-more-private-browsing-DoH.html (Erişim Tarihi: 07.04.2023) 4.1.1 Dezavantajları DoH\u0026rsquo;nin bir dezavantajı, belirli ortamlarda uygulanmasının zor olabilmesidir. Örneğin DoH, bazı güvenlik duvarları veya internet servis sağlayıcıları tarafından engellenebilir ve bu da kullanımını zorlaştırabilir. Ek olarak, bazı ağ yöneticileri, ağ trafiğini izlemeyi ve denetlemeyi zorlaştırabileceğinden, şifrelenmiş DNS sorgularına izin vermek istemeyebilir.\nDoH ile ilgili bir başka olası sorun, gecikmeyi artırabilmesi ve DNS sorgularını yavaşlatabilmesidir. Bunun nedeni, DoH sorgularının, geleneksel bir DNS sorgusundan daha fazla ek yük gerektiren bir HTTPS bağlantısı üzerinden gönderilmesidir. Bu, çoğu kullanıcı için fark edilmese de, çevrimiçi oyunlar veya gerçek zamanlı video konferans gibi düşük gecikmeli DNS sorguları gerektiren uygulamalar için bir sorun olabilir.\n4.2 TLS üzerinden DNS (DoT) DNS-over-TLS (DoT), DNS sorgularını şifreleyen başka bir protokoldür, ancak HTTPS yerine Aktarım Katmanı Güvenliği (TLS) protokolünü kullanır. DoT, DoH ile benzer güvenlik avantajları sağlar, ancak yaygın olarak desteklenmez.\nDoT\u0026rsquo;yi kullanmak için cihazınızı bir DoT sunucusu kullanacak şekilde yapılandırmanız gerekir. DoT, Cloudflare, Quad9 ve Google dahil olmak üzere birkaç DNS sunucusu tarafından desteklenir.\nhttps://www.myrasecurity.com/de/knowledge-hub/dns-over-tls (Erişim Tarihi: 07.04.2023) 4.2.1 Dezavantajları DoH gibi, DoT da güvenlik duvarları veya internet servis sağlayıcıları tarafından engellenebilir. Bu, özellikle ağ yöneticilerinin şifreli DNS sorgularına izin vermek istemediği ortamlarda kullanımı zorlaştırabilir.\nDoT ile ilgili bir başka olası sorun, güvenlik duvarında açık olmak için özel bir bağlantı noktası (853 numaralı bağlantı noktası) gerektirmesidir. Güvenlik duvarı özellikle izin verilenler dışındaki tüm bağlantı noktalarını engelleyecek şekilde yapılandırılmışsa bu sorun olabilir.\n4.3 QUIC üzerinden DNS (DoQ) DNS-over-QUIC (DoQ), QUIC protokolünü kullanarak DNS sorgularını şifreleyen yeni bir protokoldür. DoQ hala geliştirme aşamasındadır, ancak DoH veya DoT\u0026rsquo;den daha hızlı ve daha güvenli DNS sorguları sağlama potansiyeline sahiptir.\nDoQ, gecikmeyi azaltan ve performansı artıran TCP yerine UDP kullanır. Ayrıca, bir DNS sunucusuyla bağlantı kurmak için gereken süreyi azaltabilen sıfır RTT anlaşmalarını da destekler.\n4.3.1 Dezavantajları DoQ nispeten yeni bir protokoldür ve şu anda onu destekleyen yalnızca birkaç DNS sunucusu vardır. Bu, özellikle DoQ\u0026rsquo;yu desteklemeyen belirli bir DNS sunucusu kullanmanız gerekiyorsa, kullanımı zorlaştırabilir.\nDoQ ile ilgili bir başka olası sorun, hala geliştirme aşamasında olması ve çözülmesi gereken hatalar veya uyumluluk sorunları olabilmesidir. Bu, daha yavaş performansa veya başka sorunlara neden olabilir.\n4.4 DNSCrypt DNSCrypt, DNS sorgularını ve yanıtlarını açık anahtarlı şifreleme kullanarak şifreleyen bir protokoldür. DNSCrypt, DNS sahtekarlığını ve ortadaki adam saldırılarını önlemek için tasarlanmıştır.\nDNSCrypt ile, DNS sorguları bir ortak anahtar kullanılarak şifrelenir ve sunucu, ortak anahtar kullanılarak doğrulanabilen imzalı bir yanıtla yanıt verir. Bu, saldırganların DNS sorgularını ve yanıtlarını yakalamasını ve manipüle etmesini önler.\nDNSCrypt, OpenDNS ve Cloudflare dahil olmak üzere birkaç DNS sunucusu tarafından desteklenir. Ayrıca, dnscrypt-proxy ve Simple DNSCrypt dahil olmak üzere birkaç DNS istemcisiyle birlikte kullanılabilir.\nhttps://dev.to/cipherops/using-dnscrypt-with-adguard-home-pi-hole-7j6 (Erişim Tarihi: 07.04.2023) 4.4.1 Dezavantajları DNSCrypt\u0026rsquo;in olası bir dezavantajı, hem istemcinin hem de sunucunun protokolü desteklemesini gerektirmesidir. DNSCrypt birkaç DNS sunucusu ve istemcisi tarafından desteklenirken, DoH veya DoT kadar yaygın olarak desteklenmez. Bu, özellikle DNSCrypt\u0026rsquo;i desteklemeyen belirli bir DNS sunucusu kullanmanız gerekiyorsa, kullanımı zorlaştırabilir.\nDNSCrypt ile ilgili bir başka olası sorun, gecikmeyi artırabilmesi ve DNS sorgularını yavaşlatabilmesidir. Bunun nedeni, DNSCrypt sorgularının, geleneksel bir DNS sorgusundan daha fazla ek yük gerektiren açık anahtarlı şifreleme kullanılarak şifrelenmesidir\n\u0026gt; 4.5 Kısa Özet (TL;DR) 2 DNS-over-HTTPS, DNS-over-TLS, DNS-over-QUIC ve DNSCrypt birçok avantaj sağlarken, dikkate alınması gereken potansiyel dezavantajları da vardır. Bu protokoller, güvenlik duvarları veya internet servis sağlayıcıları tarafından engellenebilir ve gecikmeyi artırabilir veya DNS sorgularını yavaşlatabilir. Bu protokollerden herhangi birini kullanmadan önce, olası dezavantajları göz önünde bulundurmak ve ek güvenlik ve gizlilik avantajlarına değip değmeyeceğini belirlemek önemlidir. Ek olarak, tüm sunucular tüm protokolleri desteklemediğinden, kullandığınız DNS sunucusunun kullanmak istediğiniz protokolü desteklediğinden emin olmanız önemlidir. Seçtiğiniz protokol ne olursa olsun, güvenli bir DNS sunucusu kullanmak çevrimiçi gizliliğinizi ve güvenliğinizi korumada önemli bir adımdır. DNS sorgularınızın şifreli ve güvenli olduğundan emin olmak için bu protokollerden birini kullanmayı düşünün. https://www.researchgate.net/profile/Minzhao-Lyu/publication/357587121 (Erişim Tarihi: 07.04.2023) 5. Daha İleri Gizlilik İçin DNSSEC, EDNS İstemci Alt Ağı (ECS), Şifreli SNI (Encrypted SNI) ve Şifreli İstemci Merhaba (Encrypted Client Hello), internette güvenliği ve gizliliği geliştirmeye yardımcı olan önemli teknolojilerdir. Blog gönderimizin bu kısmında, söz konusu teknolojilerin her birine daha yakından bakacağız 4 ve faydalarını keşfedeceğiz.\n5.1 DNSSEC DNSSEC, DNS sızdırma saldırılarını önlemek için tasarlanmış bir güvenlik protokolüdür. DNS sahtekarlığı, bir bilgisayar korsanı bir DNS sorgusunu yakaladığında ve istenen etki alanının IP adresini kötü amaçlı bir IP adresiyle değiştirdiğinde gerçekleşir. DNSSEC, DNS yanıtlarının gerçekliğini doğrulamak ve kullanıcıların doğru web sitesine yönlendirilmesini sağlamak için kriptografik imzalar kullanır.\nDNSSEC, her DNS kaydına, yanıta güvenmeden önce istekte bulunan cihaz tarafından doğrulanan bir dijital imza ekleyerek çalışır. DNSSEC ayrıca, orijinalliklerini doğrulamak için kullanılabilecek DNS kayıtları için ortak anahtarları dağıtmak için bir mekanizma sağlar.\nhttps://www.dk-hostmaster.dk/en/dnssec (Erişim Tarihi: 07.04.2023) 5.2 EDNS İstemci Alt Ağı (ECS) EDNS İstemci Alt Ağı, DNS sunucularının istemcinin IP adresi hakkında bilgi almasına izin veren DNS protokolünün bir uzantısıdır. Bu bilgiler, DNS sorgularına daha doğru yanıtlar sağlamak için kullanılır ve DNS çözümleme sürecinin hızını ve güvenilirliğini artırmaya yardımcı olabilir.\nEDNS İstemci Alt Ağı ile DNS sunucuları, istekte bulunan cihazın coğrafi konumunu belirleyebilir ve bu konum için optimize edilmiş bir yanıt sağlayabilir. Bu, gecikmeyi azaltmaya ve internetin genel performansını iyileştirmeye yardımcı olabilir.\n5.3 Şifreli SNI (Encrypted SNI) Şifreli SNI (Server Name Indicator), TLS el sıkışma işleminde SNI alanını şifreleyen bir teknolojidir. SNI alanı, istemcinin bağlanmak istediği sunucunun ana bilgisayar adını belirlemek için kullanılır. Şifreli SNI, bu alanı şifreleyerek gizli dinleme ve ortadaki adam saldırılarını önlemeye yardımcı olur.\nŞifreli SNI, önemli bir gizlilik özelliğidir çünkü SNI alanı bir kullanıcının çevrimiçi etkinliğini izlemek için kullanılabilir. Şifreleme olmadan, ISP\u0026rsquo;ler, hükümetler ve diğer üçüncü tarafların SNI bilgilerine müdahale etmesi ve kullanıcı gizliliğini tehlikeye atarak izlemesi mümkündür.\nhttps://blog.cloudflare.com/encrypted-client-hello (Erişim Tarihi: 07.04.2023) 5.4 Şifreli İstemci Merhaba (Encrypted Client Hello) Encrypted Client Hello, TLS anlaşma sürecinin gizliliğini ve güvenliğini artırmaya yardımcı olan başka bir teknolojidir. İstemci Merhaba mesajı, TLS bağlantısını başlatmak için istemci tarafından gönderilir ve istemcinin desteklediği TLS sürümleri ve şifre paketleri hakkında bilgi içerir.\nEncrypted Client Hello, İstemci Merhaba mesajını şifreleyerek, gizli dinleme ve ortadaki adam saldırılarını önlemeye yardımcı olur. Ayrıca, üçüncü tarafların Müşteri Merhaba mesajını ele geçirmesini ve analiz etmesini önleyerek kullanıcı gizliliğinin korunmasına yardımcı olur.\nhttps://blog.cloudflare.com/encrypted-client-hello (Erişim Tarihi: 07.04.2023) Çözüm DNSSEC, EDNS İstemci Alt Ağı, Şifreli SNI ve Şifreli İstemci Hello, internette güvenliği ve gizliliği geliştirmeye yardımcı olan önemli teknolojilerdir. Bu teknolojiler, DNS sahtekarlığı saldırılarını önlemek, daha doğru DNS yanıtları sağlamak ve TLS el sıkışma işlemi sırasında kullanıcı gizliliğini korumak için tasarlanmıştır. Bu teknolojileri uygulayarak herkes için daha güvenli ve güvenli bir internet oluşturmaya yardımcı olabiliriz.\n6. Sonuç (TL;DR) İnternette gezinirken karşınıza çıkan reklamlardan sıkıldıysanız, AdGuard reklamları engellemek için mükemmel bir seçimdir. Gelişmiş özellikleri ve özelleştirilebilir filtreleri, size hangi içeriği görüp neyi görmediğiniz üzerinde tam kontrol sağlar. AdGuard\u0026rsquo;ı bugün indirin ve daha hızlı, daha güvenli ve daha keyifli bir tarama deneyiminin keyfini çıkarın.\nContextual Advertising, Analytics Tools, Banner Advertising, Error Monitoring, Cookie Consent Notification, Youtube Ads ve Message Box\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nTL;DR: Too long; Didn't read veya Çok uzundu; okumadım özet geç anlamında\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nBüyük güç büyük sorumluluk getirir. -Örümcek Adam\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nDikkatli bakıyor musunuz? -Prestige Youtube\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://wiseweb-works.github.io/blog/post/adguard-reklam-engelleme/","summary":"1. AdGuard: Reklamsız Gezinti İçin Nihai Çözümünüz İnternette gezinirken sürekli karşınıza çıkan reklam ve açılır pencerelerinden sıkıldıysanız, AdGuard Windows uygulamasını kullanmayı düşünebilirsiniz. AdGuard, yalnızca reklamları kaldırmakla kalmayıp aynı zamanda bilgisayarınızı kötü amaçlı yazılımlardan ve kimlik avı saldırılarından koruyan güçlü bir reklam engelleyicidir. Tanıdığınız ve bildiğiniz tüm reklamlara son kez sarılın artık onları bir daha göremeyeceksiniz. Çünkü bu blog gönderisinde, AdGuard\u0026rsquo;ın özelliklerini ve göz atma deneyiminizi nasıl geliştirebileceğini keşfedeceğiz.\n1.1 AdGuard Uygulamasının Özellikleri 1.","title":"AdGuard ile Reklam Engelleme"},{"content":"Giriş ve Özet Bugün sizlerle kendi bence son zamanların en önemli yazılımlarından olan OpenVPN ile ilgili derinlemesine bir inceleme yapacağız. Bu incelememizde öncelikle OpenVPN\u0026rsquo;in ne için kullanıldığından bahsedeceğiz. Ardından programı çalıştırmak için nelere ihtiyaç duyduğumuzu ve ilk çalıştırma öncesi yapılması gerekenleri inceleyeceğiz. Son olarak da bağlantının başlatıldığı ilk andan verinin çözüldüğü son adıma kadar nelerin arka planda döndüğünü anlatmaya çalışacağım. Dolayısıyla yazımız tahminimce 3 bölüm ve gerekirse bir de soru-cevap bölümünden oluşacak. Şimdi kemerlerimizi bağlayalım ve internetin derin ve kasvetli dünyasında bir geziye çıkalım.\nOpenVPN nedir ve ne için kullanılıyor ? Günümüzde artık internet üzerinden yapılmayan bir iş neredeyse kalmadı. Hatta normalde internet üzerinden olmayan çalışma eylemimiz bile pandemi ve yeni normal nedeniyle evden çalışmaya doğru evrildi. Fakat hem alışık olmadığımız bir çalışma yöntemi olması nedeniyle hem de insanlarımızın teknoloji ile arasının pek iyi olmaması nedeniyle büyük sorunlar yaşandı. İnsanların evlerindeki bilgisayarlardan ofisteki bilgisayarlarına bağlanması gerektiği anlaşılmadan önce bazı firmalar çalışanların evlerine ofis bilgisayarlarını gönderme gibi uçuk fikirler buldu. Bunun ne kadar hatalı bir gidiş yolu olduğunu kısa süre içinde aldıkları geri dönüşlerden çok iyi anladılar. Kısaca elektronik cihazların ofiste kalması ve bir şekilde uzaktan güvenli ve sürdürülebilir bir bağlantı yapılması gerektiği sonunda kabullenildi. Kurumlar daha önceleri de kendilerini böyle ihtiyaçlar içinde buluyordu elbette ama bu derece büyük ölçekli bir durum söz konusu değildi o zamanlar. Pandemi öncesinde PPTP, L2TP, IPSec, IKev2, SSTP ve nihayet OpenVPN gibi çeşitli protokoller kullanıyordu. Bunlar genelde belirli uzun ve havalı kelimelerin kısaltması olup temel mantıkları iki veya daha fazla cihazı birbirine bağlamak ve aynı ağdaymış gibi hareket etmelerini sağlamak üzerinedir. OpenVPN\u0026rsquo;den önceki protokoller belirli zayıflıkları, yavaşlıkları ve uygulanmasıyla ilgili teknik zorlukları da beraberlerinde getirdikleri için çok bahsetmeyeceğim. OpenVPN sunucu ve istemci rolündeki en az 2 cihazın birbirlerine bağlanması ve bunu endüstiri standartlarını karşılayacak şekilde yapmasına yarayan protokol ve programın adıdır. Ben uzak masaüstü programı kullanıyorum buna ne gerek var dediğinizi duyar gibiyim. Maalesef o ve onun gibi diğer tüm programlar temelde bu protokolü kullanmak durumunda kalıyorlar. En meşhurlarından olan TeamViewer programında kalkan simgesine veya bağlantı ayrıntılarına bastığınız takdirde OpenVPN protokolünü görebilirsiniz.\nOpenVPN bağlantısı kurmak için nelere ihtiyaç duyarız ? Öncelikle hem sunucu hem de istemci (bağlanacak cihaz) tarafında OpenVPN\u0026rsquo;in kurulu olması gerekiyor. Ardından cihazların hangi şartlar altında iletişim kuracaklarını gösterir bir ayar (config) dosyasının düzenlenmesi gerekmektedir. Asıl olay zaten bu config dosyasının üretilmesi ve istemci tarafından kullanılmasıdır. Bu config dosyası sunucu tarafından kullanılan server_config ve istemci tarafından kullanılan client_config olarak ikiye ayrılır.\nServer tarafında tutulan ayar dosyası şu girdileri içermektedir port 1194 OpenVPN bağlantısını yapmak için kendisine hangi port üzerinden bağlantı talebi geleceğini belirtir. proto tcp Bağlantının TCP veya UDP üzerinden yapılması mümkün. Seçim için girilen ayar girdisi. dev tun TAP veya TUN arabirimi kullanılabilir. Bunlar sanal arabirimlerdir. TAP layer 2 bir bağlantı kurarken TUN layer 3 bir bağlantı kurar. user nobody Bağlanan kullanıcıların sunucu üzerinde yetkisiz bir kullanıcıya linklenmesini sağlıyor. group $NOGROUP Bağlanan kullanıcıların sunucu üzerinde grup olarak da yetkisiz bir gruba linklenmesini sağlıyor. persist-key Sanal arabirimin oluşturulması ve yeniden başlatılması ile ilgili bir yetkilendirme ayarı persist-tun Yine aynı şekilde sanal arabirimin oluşturulması ve yeniden başlatılması ile ilgili bir yetkilendirme ayarı keepalive 10 120 Kaç adet bağlantının aktif tutulacağını ve ne kadar süre iletişim kurulmaz ise aktif bağlantının sonlandırılacağı ile ilgili bir ayar ifconfig-pool-persist ipp.txt OpenVPN tarafından istemcilere sanal ağda verilen IP adreslerinin tutulması ve tekrar bağlandıkları takdirde aynı adreslerin verilmesi için bir ayar push \u0026quot;dhcp-option DNS 1.1.1.1\u0026quot; Sunucunun ağa çıkarken kullanması için bir DNS ayarı compress Sıkıştırma seçeneklerinin ayarlandığı kısım dh none Diffie-Hellman\u0026rsquo;ın açılıp kapatılması ile ilgili bir ayar ecdh-curve Eğer Elliptik Eğri Diffie-Hellman kullanıyor iseniz yanında seçmeniz gereken eğrinin ayarlandığı ayar dh dh.pem Diffie-Hellman kullanıyor iseniz önceden oluşturmanız gereken PEM dosyasının konumunu belirten ayar tls-crypt tls-crypt.key TLS katmanının pre-shared master öncesinde dahi şifrelenmesi için gerekli ayar tls-auth tls-auth.key 0 TLS katmanının pre-handshake aşamasında şifrelenmesinin de ötesinde tarafların da doğrulanmasını sağlayan ayar crl-verify crl.pem Üretilen sertifikaların revoke edilip edilmediğinin CRL listesi üzerinden kontrol edilmesine yarayan ayar ca ca.crt Üretilen sertifikaya ait sertifika otoritesinin sertifikasının konumunu bildiren bir ayar cert $SERVER_NAME.crt Sunucunun sertifikasının konumunu bildiren bir ayar key $SERVER_NAME.key Sunucunun sertifikasının yanında yine gerekli olan asimetrik secret keyinin konumunu bildiren bir ayar auth $HMAC_ALG Veri kanalı ve gerekirse tls-auth için hangi özet algoritmasının kullanılacağını bildiren bir ayar cipher $CIPHER Veri kanalı için hangi şifreleme algoritmasının kullanılacağını bildiren bir ayar ncp-ciphers $CIPHER Sunucunun kullanabileceği şifreleme algoritmalarını bildiren bir ayar tls-server Sunucunun TLS kanalını kullanmasını söyleyen bir ayar tls-version-min 1.2 TLS kanalında kullanılması için en düşük versiyonu bildiren bir ayar tls-cipher $CC_CIPHER Veri kanalından hariç TLS katmanında da şifreleme kullanılıyor bu da kontrol kanalı şifrelemesini bildiren ayar client-config-dir /etc/openvpn/ccd İstemci ayar dosyalarının tutulduğu konumu bildiren ayar status /var/log/openvpn/status.log Durum raporlarının yazılacağı konumu ve log dosyalarının tutulduğu konumu bildiren ayar verb 3 Verbose kelimesinin kısaltılmışı olan bu ayar ne kadar detaylı durum raporu verileceğinin ayarıdır. İstemci tarafında tutulan ayar dosyası şu girdileri içermektedir client İlgili cihazın istemci rolünde olduğunu belirtiyor proto tcp-client Protokol olarak TCP\u0026rsquo;nin kullanılacağını bildiriyor remote $IP $PORT Bağlanılacak sunucu(ların) IP adresinin ve Port numarasının ayarladığı kısım dev tun TUN/TAP arabirimlerinden hangisinin kullanılacağını ayarlıyor resolv-retry infinite Eğer IP veya DNS nedeniyle adres çözümlemesi gecikir ise ne kadar süre ile bekleyeceğini söylüyoruz nobind Lokaldeki herhangi bir adrese bağlanılmamasını bildiren ayar persist-key Yeniden başlatma durumunda anahtar dosyalarının ek bir yetkiye gerek kalmadan okunabilmesini yarar persist-tun Aynı şekilde yeniden başlatma durumunda TUN/TAP arabiriminin yetkiye gerek kalmadan uyandırılabilmesine yarar remote-cert-tls server Bağlanılan sunucunun sertifikasını TLS katmanında doğrulanmasını sağlar verify-x509-name $SERVER_NAME name Sunucunun geri döneceği sertifikasındaki ismi ve sunucunun isminin ne olması gerektiğini bildiren komut auth $HMAC_ALG Doğrulama için hangi algoritmanın kullanılacağını bildiren komut auth-nocache Oturum açmak için gerekli parolayı önbelleğe almaz cipher $CIPHER Şifreleme için kullanılacak algoritmayı seçmeye yarayan komut tls-client TLS iletişimi sırasında TLS\u0026rsquo;yi etkinleştirir ve istemci rolünü üstlenir tls-version-min 1.2 En düşük TLS versiyonunu ayarlar tls-cipher $CC_CIPHER TLS kontrol kanalında kullanılacak şifreleme algoritmasını seçer ignore-unknown-option block-outside-dns Bilinmeyen DNS adreslerinin kullanılmasını engeller setenv opt block-outside-dns Windows 10 için DNS sızıntılarını engeller verb 3 Rapor verme derecesini belirler compress Sıkıştırma algoritması ayarları burada bildirilir \u0026quot;\u0026lt;ca\u0026gt;/etc/openvpn/easy-rsa/pki/ca.crt\u0026lt;/ca\u0026gt;\u0026quot; Beklenilen sunucu sertifika otoritesi dosyasının Hard-Coded gömülmesi \u0026quot;\u0026lt;cert\u0026gt;/etc/openvpn/easy-rsa/pki/issued/$CLIENT.crt\u0026lt;/cert\u0026gt;\u0026quot; İstemci sertifika dosyasının Hard-Coded gömülmesi \u0026quot;\u0026lt;key\u0026gt;/etc/openvpn/easy-rsa/pki/private/$CLIENT.key\u0026lt;/key\u0026gt;\u0026quot; İstemci asimetrik secret keyinin Hard-Coded gömülmesi \u0026quot;\u0026lt;tls-crypt\u0026gt;/etc/openvpn/tls-crypt.key\u0026lt;/tls-crypt\u0026gt;\u0026quot; TLS crypt için key dosyasının belirtilmesi \u0026quot;\u0026lt;tls-auth\u0026gt;/etc/openvpn/tls-auth.key\u0026lt;/tls-auth\u0026gt;\u0026quot; TLS auth için key dosyasının belirtilmesi key-direction 1 TLS katmanı şifrelenmesi için istemci ve sunucuya rol atıyor (0 ve 1 şeklinde) Bu ayarları ve daha bir çoğunun ayrıntılı dökümantasyonunu OpenVPN web sayfasında bulabilirsiniz.\nOpenVPN bağlantısı kurulurken neler oluyor ? OpenVPN ile bağlantı kurduğum her zaman kendimi Yıldız Filosu planlarını kaçıran R2-D2 gibi hissediyorum. İnsanlar kendilerini her zaman için derinlemesine bir inceleme içerisinde bulmak istemiyorlar ve birilerinin onlara neyin nasıl döndüğünü açıklamalarını isteyebiliyorlar. Benim bu yazıyı kaleme alma amacımda aslında bu soruyu kendime sormuş olmam ve cevabını almak için çok çaba sarfetmiş olmam. Sizin de bu kadar uğraşmanızı istemem fakat size hemencecik bunu yükle gerisini düşünme o iş bende de diyemem. Başta söz verdiğim gibi derinlemesine bir şekilde bu süreci sizlere anlatacağım ve kararı size bırakacağım. Bir OpenVPN bağlantısında artısıyla eksisiyle (benim şu ana kadar çözebildiğim şekliyle) süreç şöyle işliyor. Önce bir TCP/UDP bağlantısı kuruyorsunuz. TCP kullanan her uygulama gibi bir süreç yürütüyorsunuz ve ardından TLS katmanına geçiyorsunuz. TLS katmanında el sıkışma (handshake) ve bazı kimlik doğrulama işlemleri yapıyorsunuz. Bu katmana aynı zamanda kontrol kanalı da deniliyor. Ardından belirli bir iletişim tutturulmuş oluyor ve veri kanalına geçiliyor. Veri veya data kanalında bu sefer gönderilecek veri paketlerinin şifrelenmesi ve çözülmesi süreci başlıyor. Bunun için yine cihazlar birbirleri ile konuşuyor ve belirli ortak şartlar altında veriler gönderilmeye başlanıyor. Kısaca bu şekilde anlattığım sürecin sonunda 0\u0026rsquo;dan başlattığımız iletişim bize güvenli ve istediğimiz şekilde verilerin ulaşması ile son buluyor veya açık tutulan bağlantı üzerinden bu sefer tersine bir yolla yeniden istekler iletiliyor. Böylece iç içe borular gibi bir sistem ortaya çıkıyor. Yazı için gerekli olan tek önemli şeyi buraya yazmak gerekirse eğer:\nTLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384_P512 şeklinde olacaktır. Burada TLS girdisi kontrol kanalının TLS katmanı üzerinden yürütüleceğini belirtir. Diğer alternatifler SSL veya NULL\u0026lsquo;dur. ECDHE girdisi Elliptik Diffie-Hellman algoritması kullanılarak ilk ön-anahtarın üretileceğini belirtir. Diğer alternatifler DHE, DH veya kullanmamaktır. ECDSA verisi karşılıklı kimlik doğrulama ve asimetrik anahtar için Elliptik Dijital İmza Sertifikası Algoritmasının kullanılacağını belirtir. Diğer kullanılabilir alternatif RSA\u0026lsquo;dır. Diğerlerini saymaya gerek bile yok. AES_256_GCM veri kanalında kullanılacak şifreleme algoritmasının belirtir. Diğer alternatifler AES-128-CBC, AES-128-GCM ve AES-256-CBC\u0026lsquo;dir SHA384 kullanılacak özet algoritmasını belirtir. Diğer alternatif SHA256\u0026lsquo;dır. P512 ise kullanılacak elliptik eğrinin Prime-512 adlı eğri olarak seçilmesini sağlar. Diğer alternatifler P-256 ve P-384\u0026lsquo;dür. TCP bağlantısının kurulması süreci Şimdi kafanızda sürecin yaklaşık bir resmi oluştu ise başlangıcı TCP sürecinin anlatımıyla yapıyorum. Olayımızda bir istemci ve bir sunucunun olduğunu ve bağlantının sadece bu ikisinden ibaret olduğunu düşünelim. İstemci bağlanmak istediği sunucuya bir SYN (m) paketi gönderir. Sunucu ise buna cevap olarak aynı port üzerinden bir SYN (n) paketi ve ACK (m+1) paket gönderir. Bunu alan istemci de cevap olarak ACK (n+1) şeklinde dönüş yapar ve 3\u0026rsquo;lü TCP el sıkışması veya 3 Way TCP handshake gerçekleşmiş olur. Böylece belirtilen port üzerinden istemci ve sunucu arasında açık bir kanalımız oluştu.\nhttps://blog.shiftasia.com/what-happen-when-access-website (Erişim Tarihi: 08.04.2023) https://www.netscout.com/blog/asert/ddos-attacks-ssl-something-old-something-new (Erişim Tarihi: 08.04.2023) Fotoğraflarda da görüleceği üzere eğer süreç sorunsuz işler ise 3 adımda iletişim kurulabiliyor. Fakat neden 3 adımda bu işi yapıyoruz daha kısa şekilde olmaz mı derseniz size (şimdilik) hayır olmaz full-duplex bir iletişim için her iki tarafın da SYN ve ACK paketlerini göndermesi gerekiyor derim. İleride belki farklı yollarını da anlatırım ama şimdilik böyle. Zaten işin TCP/UDP kısmı her zaman için kısa ve basittir.\nTLS katmanındaki işletilen süreç TCP üzerinden bir iletişim kurulmasının ardından yine muhabbeti başka bir aşamaya taşıyan kişi istemci oluyor. Her zaman için istemciler sunucudan bir şeyler talep eder veya bir cevap ister. Sunucular genel olarak kendilerine gelmeyen bir isteği cevapladığı çok görülmemiştir. Önce talep sonra arz ilkesine göre süreç ilerler. Evet, taraflar TLS katmanındalar şimdi. İstemci sunucuya önce bir merhaba diyor. Şaka değil gerçek. İstemci tarafından gönderilen ilk pakete Client-Hello paketi denir. Bu paketin yanında (süreci hızlandırmak adına) desteklediği şifreleme algoritmalarını belirten Supported-Chipers paketi, istemci tarafından rastgele üretilmiş bir sayı, aynı IP adresinde birden fazla hizmet çalıştırılıyor ise bir SNI sunucu adı indikatörü ve yine gerekiyor ise oturum ID\u0026rsquo;si gönderilir. Sunucunun buna cevabı ise öncelikle kibar bir merhaba demek oluyor. Çünkü sunucunun cevaben gönderdiği ilk pakete de Server-Hello paketi denir. Bu paketin yanında sunucu sertifikasını, kendi desteklediği şifreleme algoritmalarını ve seçtiği algoritmayı belirten Selected-Chiper paketi, kendisinin ürettiği rastgele bir sayıyı, gerekirse Oturum ID\u0026rsquo;sini ve aynı IP üzerinden birden fazla istemci bağlanıyor ise buna ilişkin SNI benzeri bir ID\u0026rsquo;yi gönderir. İstemci öncelikle iletişime başladığı tarafından gerçekten beklediği kişi olup olmadığını sunucu sertifikası ile doğrular. Ayrıca bazı durumlarda da sunucu istemcinin beklediği istemcilerden biri olup olmadığını yine sertifika ile doğrular. Eğer bu karşılıklı doğrulama (mutual-authentication) süreci olumlu sonuçlanır ise bir sonraki aşamaya geçilir. Anahtar üretim ve değişim süreci tetiklenmiş olur. Bu aşamda yine istemci devreye girer ve güvensiz önkabul edilen bu iletişim sırasında belirledikleri algoritma ile anahtar değiştirmek istediğini söyler. Taraflar Diffie-Hellman veya ECDHE ile bir önanahtar oluşturmaya başlarlar. Bunun için istemci ve sunucu tarafından ön-sırlar paylaşılır. Bir takım matematiksel işlemler yapılarak bulunan cevaplar karşıya gönderilir ve tekrar matematiksel işlemler yapılarak aynı sonuca ulaşılır. İşte ulaşılan sonuç aralarında güvenli bir şekilde oluşturdukları ilk ön-anahtar oluyor. Bundan sonra belirledikleri şifreleme algoritması ile iletişime geçmek için kontrol kanalından hariç bir veri kanalı oluşturulur ve süreç oradan devam eder.\nhttps://www.researchgate.net/publication/298065605_A_multi-level_framework_to_identify_HTTPS_services (Erişim Tarihi: 08.04.2023) Fotoğraflarda da görülebileceği üzere süreç bir web sayfasına bağlanılırken yaşanan süreçle neredeyse aynı. Sadece ihtiyaçlara göre belirli aşamalar ekleniyor, çıkarılıyor veya değiştiriliyor. Örneğin İleri Seviye Gizlilik anlamına gelen PFS gereğince taraflar ön-anahtarı sunucunun asimetrik anahtarı ile iletmiyor. Çünkü bu durumda her oturum için aynı anahtar kullanılacağı için verilerin depolanıp daha sonra anahtar açığa çıktığı bir gün beklenerek veriler geçmişe dönük okunabilir bir hale gelecektir. Bu yüzden bu değişiklik yapıldı. Yine sıfır güven tehdit modeli gereğince her bir katmanın ve sürecin bir diğerinin işini doğru yapacağına güvenmeden süreci ilerletmesini istiyorum. Bu yüzden TLS katmanındaki o ilk iletişim anında dahi paketlerin tls-auth özelliği gereğince şifrelenmesini ve gelen-giden verilerin bütünlüğünün doğrulanmasını istiyoruz. Daha ilk merhaba dediğiniz andan itibaren üçüncü kişiler sizin ne konuştuğunuzu hangi aşamada olduğunuzu anlayamayacaklardır. Bunun için önceden belirlenmiş bir anahtar/anahtarlar ile ilk iletişim başlatılır ve gerekirse belirli aralıklarla bu anahtarlar yenilenir. Böylece TLS katmanında ilk ön-anahtar oluşturulana kadar dahi gizlilikten ödün verilmemiş ve yetkisiz kişilerce boşuna tarafik yaratılmamış olur.\nVeri katmanında işleyen süreç Eğer tüm bu süreç başarılı bir şekilde tamamlanmış ve veri kanalına geçilebildiyse eğer artık işin en güzel kısmına gelmiş bulunuyorsunuz. Veriler AES şifreleme methodu ile şifrelenecek. Şifreleme sırasında seçiminize göre CBC-GCM counter moduna göre tablolar karıştırılacak ve bu süreçte seçiminize göre 128 veya 256 bit uzunluğunda şifreleme anahtarı kullanılacak. Tabi ne hangisini seçerseniz seçin şifreleme blok uzunluğu 128 bit olucak. Değişen sadece şifreleme anahtarı uzunluğu. Benim bu anlatımım için seçmiş olduğum AES-256-GCM bir AEAD şifreleme türüdür. Diğer kanallardan ve süreçlerden bağımsız olarak gönderdiği verileri belirli bir aşamada özetini çıkartır ve özeti ile birlikte gönderir. Böylece \u0026lsquo;Authentication Encryption with associated data\u0026rsquo; anlamına gelen AEAD\u0026rsquo;de doğrulama ve şifreleme işlevleri yerine getirilmiş oluyor. Burada bir ayrıma gidilmesini gerektirecek şöyle bir sorun mevcuttur. Şifreleme ve Özet alma algoritmalarını hangi aşamada ve sırayla kullanacağız.\nEncrypt-then-MAC (EtM) https://en.wikipedia.org/wiki/Authenticated_encryption (Erişim Tarihi: 08.04.2023) Encrypt-and-MAC (E-and-M) https://en.wikipedia.org/wiki/Authenticated_encryption (Erişim Tarihi: 08.04.2023) MAC-then-Encrypt (MtE) https://en.wikipedia.org/wiki/Authenticated_encryption (Erişim Tarihi: 08.04.2023) Birinci yaklaşım olan EtM\u0026rsquo;ye göre veri önce şifrelenir ardından başka bir anahtar ile özeti sonucu şifrelenir ve ortaya çıkan sonuç bloklar halinde birlikte gönderilir. Bunu kullanan gerçek dünya çözümlerine bakacak olursak IPSec protokolü ilk akla gelen olacaktır. Bu, AE\u0026rsquo;de en yüksek güvenlik tanımına ulaşabilen tek yöntemdir, ancak bu ancak kullanılan MAC algoritmasının bozulma içermediği veya henüz kırılmadığı takdirde elde edilebilir. SSHv2 için de çeşitli EtM şifre takımları mevcuttur. Ancak veri ve özet için anahtar ayrımının zorunlu olduğunu unutmayın (şifreleme ve anahtarlı karma için farklı anahtarlar kullanılmalıdır), aksi takdirde kullanılan belirli şifreleme yöntemine ve karma işlevine bağlı olarak potansiyel olarak güvensiz bir sonuç elde edebilirsiniz.\nİkinci yaklaşım olan E\u0026amp;M\u0026rsquo;ye göre düz metin olan veri şifrelenir ve yanına düz metin verinin şifrelenmemiz halinin özeti eklenir. Burada sadece bir anahtar kullanılmış olmasına rağmen aynı veriye ait iki farklı sonucun (şifreleme sonucu ve özet sonucu) olması güvenliğin yeterince iyi olmadığını açıkca gözler önüne sermektedir. Bu sistemi kullanan gerçek dünya çözümü olarak SSH\u0026rsquo;ın ilk versiyonlarını örnek gösterebiliriz. Bunu geliştirmek için ayrıca gönderilen özet dosyasını da aynı anahtar ile şifreleme gibi yöntemler denenmiştir.\nÜçüncü ve bildiğim son yaklaşım olan MtE\u0026rsquo;ye göre düz metine dayalı olarak bir özet dosyası üretilir. Ardından düz metin ve özet dosyası birlikteyken anahtar ile şifrelenir. Şifreli metin ve şifreli özet dosyası birlikte gönderilir. Bunu kullanan gerçek dünya çözümlerine bakacak olursak ilk ve en önemlisi SSL/TLS uygulamalarıdır. SSL/TLS uygulamalarının kendi içlerinde ne kadar güvenilir ve sürdürülebilir olduklarını hepimiz biliyoruz. Bunun ötesinde de güvenliği artırmak adına yıllar içersinde MAC-then-pad-then-encrypt gibi geliştirmeler yapıldı. Bu geliştirmeye göre önce düz metinin özeti alınır ardından blok boyutuna kadar doldurulur ve ardından şifreleme işlemi yapılır. Böylece daha da güvenilir bir şifreleme sonucu oluşur. Ama doldurma mekanizmasının belirli hatalar yapması durumunda Padding Oracle gibi saldırılara neden olduğu durumlar mevcuttur.\nhttps://community.openvpn.net/openvpn/wiki/Gigabit_Networks_Linux (Erişim Tarihi: 08.04.2023) Kullanılacak AEAD yaklaşımı da seçildikten sonra TAP veya TUN kullanımına göre yukarıdaki grafikte görülen yol izlenir. Bu yola göre kullanıcı alanında yapılan/yapılmak istenen eylem çekirdek (kernel) seviyesinde TAP/TUN adaptörlerine gider. Bu adaptörler çekirdek seviyesinde bulunmaları nedeniyle çok hızlı bir şekilde işlem yaparlar. Ardından sanal adaptörler ilgili kütüphane ile gerekli şifrelemeyi yapar, gerekirse özeti ekler ve paket boyutu ayarı yapar. Ardından sunucu Ethernet arayüzü üzerinden istemcinin Ethernet arayüzüne paketleri sırayla gönderir. Bunu alan istemci ise paketleri yeniden ayarlar, düzenler gerekirse birleştirir ve gerekli kütüphaneler ile şifresini çözer. Şifresini çözdükten sonra bunu sanal adaptör aracılığı ile istemcini son kullanıcısına iletir. Böylece tüm bu matematiksel işlemler, uğraşlar sonucunda birkaç çevrim neticesinde kullanıcı istediği içeriğe ulaşmış oldu. Anlatması oldukça uzun ama kullanması çok kolay sevgili okuyucular. Sadece GitHub sayfama girik ilgili script sayfasını ziyaret etmeniz yeterlidir. İlgili script tüm bu ayarlamaları interaktif olarak sizin yerinize yapmaktadır. Size de arkanıza yaslanıp keyfini çıkarmak kalıyor.\nSSS ve Son Bana mail yoluyla, Fosstodon üzerinden veya GitHub üzerinden gelen soruları zaman zaman buraya eklemeye çalışacağım. Böylece tarihsel olarak da hangi tarihte ne gibi sorular olmuş veya çözümü mevcut mu gibi düşüncelere kapılmadan direk sonuca ulaşabileceksiniz. Bunun haricinde de teknik dökümanı değiştirmeden ekstra açıklama gerektiren sorular gelirse onları da bu kısma almayı düşünüyorum.\n","permalink":"https://wiseweb-works.github.io/blog/post/openvpn-full-anlatim/","summary":"Giriş ve Özet Bugün sizlerle kendi bence son zamanların en önemli yazılımlarından olan OpenVPN ile ilgili derinlemesine bir inceleme yapacağız. Bu incelememizde öncelikle OpenVPN\u0026rsquo;in ne için kullanıldığından bahsedeceğiz. Ardından programı çalıştırmak için nelere ihtiyaç duyduğumuzu ve ilk çalıştırma öncesi yapılması gerekenleri inceleyeceğiz. Son olarak da bağlantının başlatıldığı ilk andan verinin çözüldüğü son adıma kadar nelerin arka planda döndüğünü anlatmaya çalışacağım. Dolayısıyla yazımız tahminimce 3 bölüm ve gerekirse bir de soru-cevap bölümünden oluşacak.","title":"OpenVPN Derinlemesine Anlatım"},{"content":"Giriş ve Özet Bugün sizlerle yönettiğiniz bir web sitesi veya uygulama sunucusu ile ziyaretçileriniz arasındaki trafiğin gizli/güvenilir ve doğrulanabilir olmasını sağlamak için SSL sertifikası üretmeyi öğreneceğiz. Ürettiğiniz sertifikayı nasıl ve hangi konfigürasyon ile deploy edeceğinizi önceki yazılarımda anlatmıştım. Bu yazıda ise az ekmek çok köfte denklemini nasıl kurabileceğimizi yani daha hızlı ve daha güvenli bir SSL sertifikası üretmeyi göstereceğim. Normalde Let\u0026rsquo;s Encrypt\u0026rsquo;in ACME protokolüne aşina iseniz (yazının yazıldığı tarih itibariyle) RSA asimetrik anahtar yapısı ile 1024-4098 (çok zorlarsanız belki 8196) bitlik bir sertifika ürettirmeniz ve bunu görece olarak 90 gün kullanmanız mümkündür. Fakat bu kadar büyük bir anahtarın üretilmesi, ürettikten sonra TLS handshake sırasında kullanılması ve ziyaretçilerin kullandığı cihazlar ile uyumlu olması çoğu senaryoda sorun çıkarmaktadır. Örneğin 2048 bit yerine 4096 bit kullanıldığı zaman bazı denemelerimde 0.4-0.8 sn daha uzun handshake süreleri ile karşı karşıya kalıyorum. Sadece handshake in bu kadar uzaması sorun değilmiş gibi sunucuya da ekstra bir yük bindiriyor. Fakat 4096 bit RSA yerine 384 bit ECC sertifikası ürettiğiniz zaman çok daha hızlı bir sertifikaya sahip olduğunuz gibi aynı zamanda da 7680 bit RSA\u0026rsquo;ya (öyle bir boyut olsaydı) eşit bir güvenlik elde ediyorsunuz.\nPeki iyi güzel anlattın da bu işin aması nerede dediğinizi duyar gibiyim. Sizi üzeceğim fakat bu işin aması yok. Olmamasının sebebi ise işin arka plandaki matematikte saklı. Kısaca her iki sertifika üretim ve kullanımındaki ufak farklardan bahsedip, bunların nasıl ve neden büyük farklara neden olduğunu açıklayıp son kısımda da bonus olarak başlıkta yazmayan bir şeyden bahsedeceğim. (Sonuna kadar okumanız gerekecek bonus için :D)\nhttps://www.globalsign.com/en/blog/elliptic-curve-cryptography (Erişim Tarihi: 08.04.2023) ECC Sertifikasının üretim süreci Öncelikle (her zaman olduğu gibi) içinde bulunduğumuz Linux sürümünün paket yöneticisi ile son güncellemeleri konsol üzerinden yüklememiz gerekmektedir.\nUbuntu için: sudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y Fedora için: sudo yum update -y Arch Linux için: sudo pacman -Syyu Güncellemeler yüklendikten sonra ise sunucunuzdaki (Benim olayımda Ubuntu) nginx servisini (ki bu servis dışarıdan HTTP/HTTPS bağlantıları almanıza yarayan servistir) yapılandırmaya başlıyoruz. Öncelikle çok karıştırılması nedeniyle belirtmek gerekir ki apache, nginx ve litespeed servisleri aynı işi yapan farklı servislerdir. Ben yönetimi daha kolay ve topluluk desteği daha çok diye NGINX\u0026rsquo;i terchi ettim.\nÖzel anahtarı oluşturalım İlk olarak, OpenSSL ile özel anahtarı oluşturuyoruz. Kullanacağımız OpenSSL komutu ecparam (EC parametre manipülasyonu) ve konfigürasyon parametrelerini bu komuta geçirmek için:\nopenssl ecparam -genkey -name secp384r1 -out privkey.pem -genkey seçeneği, OpenSSL\u0026rsquo;ye bir EC anahtarı oluşturmasını söyler. -name parametresi OpenSSL\u0026rsquo;ye hangi eğrinin kullanılacağını söyler. -out parametresi OpenSSL\u0026rsquo;ye çıktıyı bir dosyaya yazmasını söyler. OpenSSL\u0026rsquo;nin çıktısını varsayılan olarak PEM biçiminde yazdığını unutmayın. EC anahtarlarını işleyen ec komutuyla OpenSSL\u0026rsquo;nin doğru şeyi yaptığını kontrol edebiliriz:\nopenssl ec -in privkey.pem -noout -text -in girdi dosyasıdır -noout, OpenSSL\u0026rsquo;ye anahtarı çıkarmamasını söyler, bu da privkey.pem\u0026rsquo;i stdout\u0026rsquo;a anlamsızca yazdırır. -text, OpenSSL\u0026rsquo;ye anahtar hakkındaki bilgileri düz metin biçiminde yazmasını söyler Her şey yolunda giderse ve anahtar doğru şekilde oluşturulduysa, OpenSSL aşağıdakine benzer bir şey gösterecektir:\nread EC key Private-Key: (384 bit) priv: [gizli] pub: [gizli] ASN1 OID: secp384r1 NIST CURVE: P-384 Bu, anahtarın P-384 eğrisi ile oluşturulduğunu doğrular. Neden P-384 yerine P-512 kullanmıyoruz derseniz Let\u0026rsquo;s Encrypt ekliptik eğrilerde 384 bitten daha yüksek olursa imzalamıyor ve Google Chrome gibi modern tarayıcılar 512 bitlik ekliptik eğrileri kullanan internet sitelerini geçersiz olarak işaretliyor. Kısa cevap bu.\nSertifika için OpenSSL yapılandırması oluşturalım Şimdi TLS sertifikası almak istediğimiz etki alanına özgü parametreleri içeren bir OpenSSL yapılandırma dosyası oluşturmalıyız. Bu örnekte, bir openssl.cnf dosyasına aşağıdaki konfigürasyonu gireceğiz:\n[ req ] prompt = no encrypt_key = no default_md = sha512 distinguished_name = dname req_extensions = reqext [ dname ] CN = example.com emailAddress = admin@example.com [ reqext ] subjectAltName = DNS:example.com, DNS:www.example.com Bu yapılandırma seçeneklerinin kısa bir açıklaması:\nGerekli [ req ] bölümünde:\nprompt = no, OpenSSL\u0026rsquo;ye yapılandırma dosyasından olabildiğince fazla yapılandırma almasını söyler encrypt_key = no, OpenSSL\u0026rsquo;ye özel anahtarı bir parola ile şifrelememesini söyler. (Şifreli özel anahtarlar Nginx tarafından desteklenir, ancak ben onları kullanmıyorum.) default_md = sha512, OpenSSL\u0026rsquo;ye CSR\u0026rsquo;yi SHA512 ile imzalamasını söyler. (Bildiğim kadarıyla, Let\u0026rsquo;s Encrypt, imzaları için yalnızca SHA256\u0026rsquo;lı RSA\u0026rsquo;yı destekler, ancak bu, CSR\u0026rsquo;de daha güçlü şifreleme kullanamayacağımız anlamına gelmez.) distinguished_name = dname, OpenSSL\u0026rsquo;ye Ayırt Edici Ad yapılandırma seçenekleri için bir [ dname ] bölümü aramasını söyler. req_extensions = reqext, OpenSSL\u0026rsquo;ye, Konu Alternatif Adlarının (SAN\u0026rsquo;lar) yapılandırılmak istenen uzantılar için yapılandırma seçeneklerinde bir [ reqext ] bölümü aramasını söyler. Ayırt Edici Ad [ dname ] bölümünde:\nCN = example.com, sertifikanın Ortak Adını belirtir. emailAddress = admin@example.com e-posta adresiniz belirgin olmalıdır. İstenen Uzantılar [ reqext ] bölümünde, konuAltName, sertifika için SAN\u0026rsquo;ların listesini sağlar. (Chrome, v58\u0026rsquo;den itibaren, Ortak Adın SAN\u0026rsquo;lar listesine dahil edilmesini gerektirir). Let\u0026rsquo;s Encrypt v2, joker alan adlarını destekler, bu nedenle bu örnekte, apeks dışındaki ana bilgisayarlar için tek düzeyli bir joker karakter kullanabilirsiniz (*.example.com).\nSertifika İmzalama İsteği Oluşturalım İstemci tarafındaki son adım, OpenSSL kullanarak Sertifika İmzalama Talebi oluşturmaktır, ardından bunu imzalamak için Let\u0026rsquo;s Encrypt\u0026rsquo;e ileteceğiz ve imzalı sertifikayı geri alacağız.\nBir CSR oluşturmak için gereken OpenSSL komutu req \u0026lsquo;dir.\nopenssl req -new -config openssl.cnf -key privkey.pem -out csr.pem -new, OpenSSL\u0026rsquo;ye bir CSR oluşturduğumuzu söyler (ve mevcut bir CSR\u0026rsquo;yi incelemeyiz) -config openssl.cnf, yukarıda oluşturduğumuz yapılandırma dosyasını belirtir -key privkey.pem, yukarıda oluşturduğumuz özel anahtarı belirtir -out csr.pem OpenSSL\u0026rsquo;ye CSR\u0026rsquo;yi bir çıktı dosyasına yazmasını söyler (stdout yerine) CSR\u0026rsquo;yi doğru şekilde oluşturduğumuzu doğrulayabiliriz:\nopenssl req -in csr.pem -noout -text -verify -verify OpenSSL\u0026rsquo;nin CSR\u0026rsquo;deki imzayı doğrulamasını ister Bu, çıktıda beklenen şu sonuçları üretmelidir:\nverify OK Certificate Request: Data: Version: 1 (0x0) Subject: CN = example.com, emailAddress = admin@example.com Subject Public Key Info: Public Key Algorithm: id-ecPublicKey Public-Key: (384 bit) pub: [gizli] ASN1 OID: secp384r1 NIST CURVE: P-384 Attributes: Requested Extensions: X509v3 Subject Alternative Name: DNS:example.com, DNS:www.example.com Signature Algorithm: ecdsa-with-SHA512 [gizli] Let\u0026rsquo;s Encrypt\u0026rsquo;ten sertifikamızı imzalamasını isteyin Son adım, CSR\u0026rsquo;yi bir ACME istemcisiyle Let\u0026rsquo;s Encrypt\u0026rsquo;e imzalaması için göndermektir, bu iş için certbot en yaygın istemcidir.\nCertbot istemcisine iletilen komut satırı seçenekleri, kurulumumuza, alan adımızın kayıtlı olduğu kişiye vb. bağlı olarak değişir. Genellikle certonly komutunu kullanmamız gerekir ve asterisks (*) kullandıysanız certbot DNS eklentilerinden birini kullanmanız gerekir.\nÖrneğin, example.com alan adı Cloudflare\u0026rsquo;de kayıtlıysa, son derece uygun olan ve sürece manuel müdahale gerektirmeyen doğrulamayı işlemek için ilgili eklentiyi kullanabiliriz. (Cloudflare eklentisini gizli token bilgileriyle yapılandırmak bu makalenin kapsamı dışındadır.)\nHer şeyin yolunda olduğundan emin olmak için önce --dry-run ile düzgün sonuç alınacağından emin olunması genellikle tavsiye edilir.\ncertbot nginx certonly --dry-run --domain \u0026#34;example.com\u0026#34; --domain \u0026#34;www.example.com\u0026#34; --csr csr.pem Hatalı işlemeleri önlemek için karakterlerin etrafında tırnak işaretleri gereklidir ve genel olarak bunlar iyi bir fikirdir. --csr csr.pem certbot\u0026rsquo;a zaten bir sertifikamız olduğunu ve bizim için imzalaması için Let\u0026rsquo;s Encrypt\u0026rsquo;e ihtiyacımız olduğunu söyler. Certbot istemcisi, komut satırında istenen alan adları listesinin sertifikada listelenen alan adlarıyla eşleşip eşleşmediğini kontrol edecek ve alan adının bize ait olduğunu doğrulamak için Certbot NGINX eklentisini kullanacak ve herhangi bir sorun olup olmadığını bize bildirecektir.\nHiçbir şey yanlış değilse, size şunu söyleyecektir:\nIMPORTANT NOTES: - The dry run was successful. Gerçek komut hemen aşağıdaki gibidir:\ncertbot nginx certonly --domain \u0026#34;example.com\u0026#34; --domain \u0026#34;www.example.com\u0026#34; --csr csr.pem (Uzun) bir gecikmeden sonra, istemci çıktı olarak şunları üretecektir:\nİmzalı sertifika: 0000_cert.pem Kök ve ara sertifikalar: 0000_chain.pem Sertifika + ara ürünler: 0001_chain.pem Bu noktada, CSR csr.pem silinebilir. Merak ediyorsak, x509 komutunu kullanarak istemci tarafından OpenSSL ile döndürülen sertifikaları inceleyebiliriz:\nopenssl x509 -in 0001_chain.pem -noout -text Ne yazık ki, yukarıda açıklandığı gibi Let\u0026rsquo;s Encrypt\u0026rsquo;in sertifikamızı bir SHA256 imzasıyla imzaladığını keşfedeceğiz. (Daha güvenli olmasının yanı sıra, SHA512, modern 64-bit CPU\u0026rsquo;larda SHA256\u0026rsquo;dan daha iyi performans gösterir.) Ancak açık anahtarımız yine de ECDSA kullanmalıdır.\nBu dosyalar sıradan değildir, bu yüzden onları daha bilgilendirici bir şekilde taşımalı ve düzenlemeliyiz.\nDebian Linux\u0026rsquo;ta, özel anahtarımı /home/KULLANICI_ADI/SSL/private/example.com/privkey.pem içinde tutarak etki alanlarım için alt dizinler oluşturmayı seviyorum ve sertifikalar:\n/home/KULLANICI_ADI/SSL/certs/example.com/cert.pem /home/KULLANICI_ADI/SSL/certs/example.com/chain.pem /home/KULLANICI_ADI/SSL/certs/example.com/fullchain.pem SON Her şeyi doğru yaptıysak, sertifikayı Chrome gibi bir web tarayıcısı ile incelediğimizde, bunun bir EC sertifikası olduğunu onaylayacaktır:\nhttps://dev.to/benjaminblack/obtaining-an-elliptic-curve-dsa-certificate-with-lets-encrypt-51bc (Erişim Tarihi: 08.04.2023) Mozilla Gözlemevi de bize A+ notu verecek!\nhttps://dev.to/benjaminblack/obtaining-an-elliptic-curve-dsa-certificate-with-lets-encrypt-51bc (Erişim Tarihi: 08.04.2023) Ayrıca SSL Labs\u0026rsquo;ın rapor sonucunda 384 Bitlik bir ECC sertifikası\u0026rsquo;nın kullanıldığını görebiliyoruz.\nSSL Labs Test Sonucu NOT: Bu yazıda Benjamin Black\u0026lsquo;in aynı konulu yazısından faydalanılmıştır.\n","permalink":"https://wiseweb-works.github.io/blog/post/ecc-ssl-sertifikasi/","summary":"Giriş ve Özet Bugün sizlerle yönettiğiniz bir web sitesi veya uygulama sunucusu ile ziyaretçileriniz arasındaki trafiğin gizli/güvenilir ve doğrulanabilir olmasını sağlamak için SSL sertifikası üretmeyi öğreneceğiz. Ürettiğiniz sertifikayı nasıl ve hangi konfigürasyon ile deploy edeceğinizi önceki yazılarımda anlatmıştım. Bu yazıda ise az ekmek çok köfte denklemini nasıl kurabileceğimizi yani daha hızlı ve daha güvenli bir SSL sertifikası üretmeyi göstereceğim. Normalde Let\u0026rsquo;s Encrypt\u0026rsquo;in ACME protokolüne aşina iseniz (yazının yazıldığı tarih itibariyle) RSA asimetrik anahtar yapısı ile 1024-4098 (çok zorlarsanız belki 8196) bitlik bir sertifika ürettirmeniz ve bunu görece olarak 90 gün kullanmanız mümkündür.","title":"Linux Sunucuda ECC SSL Sertifikası Üretme"},{"content":"Linux Sunucularda SSL güvenliğini artırma Bugün sizlere mevcut sunucunuzda eğer bir websitesi ve/veya App serve ediyorsanız mutlaka ihtiyacınız olan SSL bağlantısından ve bununla bağlantılı olarak openssl kütüphanesinden bahsedeceğim. SSL (Secure Socket Layer) ve TLS (Transport Layer Security) sunucunuza bağlanmak isteyen kişileri siteniz ile güvenli şekilde iletişim kurmasına imkan sağlayan bir bağlantı şeklidir. Eskiden SSL v1-v3 arasında değişen sürümler mevcut ve siteler genelde bu SSL sürümlerini kullanırken artık SSL siteler tarafından terk edilmiş ve yerini daha güvenli olan TLS\u0026rsquo;ye bırakmıştır. Fakat yine de işin anlatımı kısmında ve config dosyalarını düzenlerken halen \u0026ldquo;ssl\u0026rdquo; kelimesini kullanmamız gerekecektir. Bunu ufak bir espiri ile de anlatmak gerekirse eğer bir uygulamanın 64 bit versiyonunu indirmek istediğiniz aman \u0026ldquo;amd_64\u0026rdquo; olarak neden geçtiğini hiç düşündünüz mü? Çünkü 64 bit\u0026rsquo;e ilk geçen AMD olduğu için buna bir saygı göstergesi ve/veya alışkanlık olarak amd_64 olarak kaldı bu isimlendirme. Aynı şekilde de şu an TLS kullanıyor olmamıza rağmen isimlendirme ve konfigürasyon parametreleri \u0026ldquo;SSL\u0026rdquo; olarak kaldı.\nDaha önceki yazımızda olduğu gibi süreci yine basit, önerilen ve ileri-seviye olarak üç farklı başlık altında anlatacağım. Başlık içerikleri kişisel gerekliliklere göre aşamalı düşünülmüştür. Başlıklar bir biri ile bağlantılı olmasına rağmen istenilen bir aşamada bırakılması sorun oluşturmayacaktır.\nBasit konfigürasyon Öncelikle içinde bulunduğumuz Linux sürümünün paket yöneticisi ile güncellemeleri konsol üzerinden yüklememiz gerekmektedir.\nUbuntu için: sudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y Fedora için: sudo yum update -y Arch Linux için: sudo pacman -Syyu Güncellemeler yüklendikten sonra ise sunucunuzdaki (Benim olayımda Ubuntu) nginx/apache servisini (ki bu servis dışarıdan gelen web bağlantılarını almanıza yarayan servistir) yapılandırmaya başlıyoruz. Nginx servisinin ayarlarının tutulduğu dosya genel itibariyle \u0026ldquo;/etc/nginx/nginx.conf\u0026rdquo; konumunda bulunur. Bunu kendi kullandığımız metin editörlerinden istediğimiz biriyle ama sudo (yani yönetici) yetkilerine sahip bir kullanıcı ile açmamız gerekmektedir.\nUbuntu üzerinden devam edecek olursak (Tek Ip Tek Sunucu Yapılandırması)\nsudo nano /etc/nginx/nginx.config # Ayar dosyasını açmaya yarayan komut Eklenecek (varsa değiştirilecek) başlıklar listen 443 ssl http2; \u0026gt;\u0026gt; ipv4 üzerinden 443 portuna gelen istekleri http2 protokolü ile karşılayıp ssl bağlantısı kurmaya yarıyor. listen [::]:443 ssl http2; \u0026gt;\u0026gt; ipv6 üzerinden 443 portuna gelen istekleri http2 protokolü ile karşılayıp ssl bağlantısı kurmaya yarıyor. (Eğer ipv6 desteğiniz yok ise veya native olarak desteklemek istemiyorsanız kaldırabilirsiniz) server_name SUNUCU_ADINIZ; \u0026gt;\u0026gt; Eğer sunucu adınızı default olarak belirlemek istemiyorsanız bir Server Name Indicator belirleyebilirsiniz. Bu gelen tüm istekleri karşılamak yerine sadece sunucu adınıza gelen istekleri karşılamaya yarar. ssl_certificate /etc/letsencrypt/live/SUNUCU_ADINIZ/fullchain.pem; \u0026gt;\u0026gt; Eğer free ssl için Let\u0026#39;s Encrypt kullanıyor iseniz default sertifika konumu burasıdır. Aksi halde kendi sertifika dosyanız ile değiştirin. ssl_certificate_key /etc/letsencrypt/live/SUNUCU_ADINIZ/privkey.pem; \u0026gt;\u0026gt; Eğer free ssl için Let\u0026#39;s Encrypt kullanıyor iseniz default private key konumu burasıdır. Aksi halde kendi private key dosya konumunuz ile değiştirin. ssl_protocols TLSv1.3 TLSv1.2; \u0026gt;\u0026gt; Sadece en güncel ve en güvenilir TLS protokollerini kabul etmek için gerekli komut. ssl_prefer_server_ciphers on; \u0026gt;\u0026gt; Sunucu ile istemcinin konuşması sırasında \u0026#34;tamam nelerimiz var bakalım\u0026#34; diye konuştuklarını tahmin ettiğim :D kısımda sunucunun sadece kendi seçtiği şifreleme algoritmaları ile bu görüşmeyi devam ettireceğini söylemesine yarayan komut. Kısacası işine gelirse böyle işine gelmezse konuşmuyorum. ssl_ecdh_curve secp521r1:secp384r1; \u0026gt;\u0026gt; Ekliptik eğrileri kullanmamız gereken durumlarda hangi eğrileri tercih ettiğimizi bildiren komuttur. ssl_ciphers DH-RSA-AES256-SHA:DH-RSA-AES256-SHA256:DHE-RSA-AES256-GCM-SHA384:DH-RSA-AES256-GCM-SHA384:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDH-ECDSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:ECDH-RSA-AES256-SHA:AECDH-AES256-SHA:ECDHE-ECDSA-AES256-SHA384:ECDH-ECDSA-AES256-SHA384:ECDH-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:ECDH-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDH-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-CCM:DHE-RSA-AES256-CCM8:ECDHE-ECDSA-AES256-CCM:ECDHE-ECDSA-AES256-CCM8:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-CHACHA20-POLY1305:DHE-RSA-CHACHA20-POLY1305; \u0026gt;\u0026gt; En güvenilir bulduğum SSL algoritmalarının bir araya getirilerek sadece bunları kullanmasını sunucuya söyleyen kod. Tek tek araştırmak isteyenler için tüm cipherlar: \u0026ldquo;https://testssl.sh/openssl-iana.mapping.html\u0026quot;\nAyarları yaptıktan sonra kontrol etmek isterseniz: \u0026ldquo;sudo nginx -t\u0026rdquo; komutunu kullanabilirsiniz. Eğer bir hata mesajı görmez iseniz \u0026ldquo;sudo systemctl restart nginx\u0026rdquo; veya \u0026ldquo;sudo service nginx restart\u0026rdquo; komutu ile ayarları uygulayıp servisi baştan başlatabilirsiniz\nÖnerilen ayarlar Bir önceki ayarlara ek olarak performans özelinde bazı iyileştirmeler ve bunun yanı sıra sitenizin SSL test sitelerinde üst sıralara çıkmasını sağlayacak bazı ek konfigürasyonlar yapacağız. Bunun ardından ise sitenizin kullanıcı ile erişiminde faydalı olarak bazı başlıkları (header) ve sitenizin kaynaklarının üçüncü kişi siteler tarafından sömürülmemesi için bir takım iyileştirmeler yapacağız.\nEklenecek (varsa değiştirilecek) başlıklar ssl_session_cache shared:TLS:2m; \u0026gt;\u0026gt; TLS bağlantılarının işçiler (nginx workers) arasında nasıl dağıtılacağını ve ne kadar süre ile bağlantıların ortak kullanılacağını belirten kod ssl_buffer_size 4k; \u0026gt;\u0026gt; SSL isteklerine cevap verirken ve handshake sonrası paket gönderimi yaparken paketlerin kaçlık konteynırlara bölüneceğini belirten kod. Daha düşük bir değer daha çok paket gönderilmesi ama daha az taşma (overhead) anlamına gelir. ssl_stapling on; \u0026gt;\u0026gt; OCSP zımbalama özelliğini aktif hale getirir ssl_stapling_verify on; OCSP zımbalamanın üst ve kök sunucularda dahil olmak üzere doğrulanması özelliğini açar. resolver 1.1.1.1 1.0.0.1 2606:4700:4700::1111 2606:4700:4700::1001; \u0026gt;\u0026gt; Cloudlfare ile OCSP zımbalama doğrulamasının yapılmasını sağlar. Eğer IPV6 kullanmıyor veya native olarak desteklemek istemiyorsanız ipv6 adreslerini silebilirsiniz. add_header X-Content-Type-Options \u0026#34;nosniff\u0026#34; always; \u0026gt;\u0026gt; Tarayıcıların MIME içeriklerini anlamak için koklama (sniff) yapmasını engeleyen başlık değeridir. add_header X-Xss-Protection \u0026#34;1; mode=block\u0026#34; always; \u0026gt;\u0026gt; Olası bir XSS açığında kullanıcıların beyaz ekran görmesini sağlayarak açığı bir nebze de olsa engelleyen bir başlıktır. add_header X-Frame-Options \u0026#34;SAMEORIGIN\u0026#34; always; \u0026gt;\u0026gt; Herhangi bir şekilde i-frame vb bir kod ile sunucunuzun bir sayfasının başka bir sayfada gösterilmesini ve/veya alt-alta üst-üste yayımlanmasını engeller. Sadece siz kendi siteniz içerisinde kendi sitenizden bir pencere yayımlayabilirsiniz. add_header Referrer-Policy \u0026#34;no-referrer-when-downgrade\u0026#34; always; \u0026gt;\u0026gt; Daha alt güvenlik önlemine sahip bir siteye yönlendirme veya link verdiğinizde otomatik olarak referrer başlığı eklemez ve sitenizden trafik geldiği belli olmaz. add_header Content-Security-Policy \u0026#34;default-src \u0026#39;self\u0026#39; https: data: \u0026#39;unsafe-inline\u0026#39; \u0026#39;unsafe-eval\u0026#39;;\u0026#34; always; \u0026gt;\u0026gt; Sizin ve diğer kullanıcıların dışarıdan çağırabilecekleri isteklerin hangi koşullar altında çağrılabileceğini düzenleyen başlık. Ben default olarak https üzerinden gelen bazı kaynaklara güveniyorum. add_header Permissions-Policy \u0026#34;camera=(), fullscreen=(self), geolocation=(), microphone=(), payment=()\u0026#34; always; \u0026gt;\u0026gt; Tarayıcıya hangi izinleri isteyeceğinizi veya hangilerine hiç ihtiyacınız olmayacağını belirterek çeşitli zehirleme türleri (cache-poisoning veya js-poisoning) ile sizin siteniz üzerinden bilgi toplanmasını engeller. Ayarları yaptıktan sonra kontrol etmek isterseniz: \u0026ldquo;sudo nginx -t\u0026rdquo; komutunu kullanabilirsiniz. Eğer bir hata mesajı görmez iseniz \u0026ldquo;sudo systemctl restart nginx\u0026rdquo; veya \u0026ldquo;sudo service nginx restart\u0026rdquo; komutu ile ayarları uygulayıp servisi baştan başlatabilirsiniz.\nİleri Seviye Ayarlar Öncelikle sitenize sadece ssl üzerinden bağlanması gerektiğini gösterecek bir başlık ekleyeceğiz. Bu sayede sizin sitenize daha önce girmiş olanlar ve hali hazırda bu başlığı tarayıcısında mevcut olanlar istese bile sizin sitenize Non-SSL şekilde erişemeyecekler. Ardından ise HTTP oturumlarına kullanılması gereken SSL sertifikalarını zımbalayacağız ve önceki yöntemin yanından hangi sertifikalar ile bağlanması gerekeceğini de önceden belirtmiş olacağız. Bu sayede yetkili bir üst sertifika yöneticisi veya kök yöneticisi olsanız dahi sizin adınıza imzaladığı sertifika ile sizin sitenize bağlanamayacaklar. Zamaında Türkiyede yerleşik E-Tuğra Kök Sertifika sağlayıcısı *.google.com adresine bir sertifika imzaladı. Biraz araştırırsanız hangi dönemde meydana geldiğini ve nedenini (ne kadar kötü sonuçlara neden olabileceğini) fardekersiniz. Şimdi başlayalım son konfigürasyon kısmına.\nÖncelikle sitenizin SSL üzerinden hiçbir soruna neden olmaksızın erişilebiliyor olduğundan emin olun. Ardından nginx konfig dosyasına aşağıdaki başlıklardan isteğinize göre birini ekleyin. Ama dikkat edin sadece bir tanesini.\nadd_header Strict-Transport-Security \u0026#34;max-age=2592000;\u0026#34; always; \u0026gt;\u0026gt; Sitenize 30 gün boyunca sadece HTTPS üzerinden erişilebileceğini belirten başlık. (Alt alan adları dahil değil) add_header Strict-Transport-Security \u0026#34;max-age=2592000; includeSubDomains;\u0026#34; always; \u0026gt;\u0026gt; Sitenize alt alan adları da dahil olmak üzere 30 gün boyunca sadece HTTPS üzerinden erişilebileceğini belirten başlık. add_header Strict-Transport-Security \u0026#34;max-age=31536000; includeSubDomains;\u0026#34; always; \u0026gt;\u0026gt; Sitenize alt alan adları da dahil olmak üzere 1 yıl boyunca sadece HTTPS üzerinden erişilebileceğini belirten başlık. add_header Strict-Transport-Security \u0026#34;max-age=31536000; includeSubDomains; preload\u0026#34; always; \u0026gt;\u0026gt; Sitenize alt alan adları da dahil olmak üzere 1 yıl boyunca sadece HTTPS üzerinden erişilebileceğini ve bu başlığın tarayıcıların önbelleğine alınması talimatını veren başlık. Ayrıca yeni çıkan tarayıcılar sitenize daha önce hiç girmese dahi bu başlıktan haberdar olacaktır. add_header Strict-Transport-Security \u0026#34;max-age=0; includeSubDomains\u0026#34;; \u0026gt;\u0026gt; HSTS özelliğini ve preload listesi üyeliğini tamamen kaldırmaya yarayan başlık. Yukarıda belirtilen başlığı ekledikten sonra şimdi kullanmış olduğunuz ssl sertifikasının özetinin HTTP oturumuna zımbalanmasına geldi. Bu aşamada mevcut sertifikanızın bir özetini çıkarmamız, üst imzalayan yetkilinin sertifikasının özetini çıkarmamız ve en üst kök sertifika yetkilisi de dahil olmak üzere tüm zinciri tamamlayana kadar bu özet çıkarma sürecini devam ettirmemiz gerekiyor. Bu nedenle root kullanıcısı veya sudo yetkisine sahip bir kullanıcı ile aşağıdaki komutları sırasıyla çalıştırıyoruz. (Anlatım Let\u0026rsquo;s Encrypt özelinde yapılmıştır.)\n1] cat /etc/letsencrypt/live/SUNUCU_ADINIZ/cert.pem | openssl x509 -pubkey | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64 \u0026gt;\u0026gt; Bu komut sizin sitenize ait sertifikanın özetini çıkaracaktır. Sonuç değerini bir yere kopyalayın. 2] curl -s https://letsencrypt.org/certs/lets-encrypt-x4-cross-signed.pem | openssl x509 -pubkey | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64 \u0026gt;\u0026gt; Bu komut letsencrypt\u0026#39;e ait çoklu imzalı sertifikalardan bir tanesinin özetini çıkaracaktır. 3] curl -s https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem | openssl x509 -pubkey | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64 \u0026gt;\u0026gt; Bu komut letsencrypt\u0026#39;e ait çoklu imzalı sertifikalardan bir tanesinin özetini çıkaracaktır. 4] curl -s https://letsencrypt.org/certs/isrgrootx1.pem | openssl x509 -pubkey | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64 \u0026gt;\u0026gt; Bu komut letsencrypt\u0026#39;e ait kök (en üst) sertifikasının özetini çıkaracaktır. Nginx config dosyasına aşağıdaki değer eklenir 5] add_header Public-Key-Pins \u0026#39;pin-sha256=\u0026#34;ILK_SONUC\u0026#34;; pin-sha256=\u0026#34;IKINCI_SONUC\u0026#34;; pin-sha256=\u0026#34;UCUNCU_SONUC\u0026#34;; pin-sha256=\u0026#34;DORDUNCU_SONUC\u0026#34;; max-age=2592000; includeSubDomains\u0026#39; always; \u0026gt;\u0026gt; Sitenize 30 gün boyunca sadece belirtilen sertifika ile bağlanılmasına izin verir. Max-age değerini isteğe bağlı olarak artırabilirsiniz. Sertifika geçerlilik süreniz 30 günden daha az kalmadan başlığı devredışı bırakmanız veya yeni sertifika edinmeniz ve beşinci değer olarak onu eklemeniz gerekmektedir. Bonus olarak sunucunuzun yapmasının çok uzun süreceği ama faydası çok olan bir komut daha göstermek istiyorum. 6] openssl dhparam -out /etc/nginx/dhparams.pem 4096 \u0026gt;\u0026gt; Bu komutu uygulaması 15dk ile 1 saat arasında sürebilir. İşlem bittikten sonra nginx konfig dosyasına aşağıdaki komutu eklemeniz gerekmektedir. ssl_dhparam /etc/nginx/dhparam.pem; \u0026gt;\u0026gt; Diffie-Hellman anahtar değişim algoritması sırasında kullanılacak değerleri default değerler dışında az önce oluşturduğumuz gizli değerler ile değiştirmeye yarayan komut. Ayarları yaptıktan sonra \u0026ldquo;sudo nginx -t\u0026rdquo; ve ardından eğer bir hata mesajı görmez iseniz \u0026ldquo;sudo service nginx restart\u0026rdquo; komutu ile ayarları uygulayıp servisi baştan başlatın. Artık sizin belirlediğiniz konfigürasyon ve şartlar ile bağlantı sağlanacaktır. Eğer öncesi/sonrası puanlama farkını görmek isterseniz aşağıdaki görsellere bakabilirsiniz veya kendi sitenizi \u0026ldquo;https://www.ssllabs.com/ssltest/index.html\u0026quot; adresinden test edebilirsiniz.\nİLK HALİ SSL Labs test sonucu SON DURUM SSL Labs test sonucu Neden Cipher Strength %100 değil derseniz TLS 1.3 ile otomatik gelen ve biz istemesek de eklenen \u0026ldquo;TLS_AES_128_GCM_SHA256 (0x1301)\u0026rdquo; yüzünden şu an %100 yapmak mümkün değil. TLS 1.3\u0026rsquo;ü kapatırım o zaman gelmez diye düşünürseniz o zaman da başka yerden puanınız gidiyor maalesef.\nSon Bu yazı daha önce https://teknolojirehberleri.xyz adresinde yayımlanmıştır. Kişisel portfolyo oluşturmak adına şahsi sitemde yeniden yayımlama ihtiyacı hissettim.\n","permalink":"https://wiseweb-works.github.io/blog/post/ssl-konfigurasyonu/","summary":"Linux Sunucularda SSL güvenliğini artırma Bugün sizlere mevcut sunucunuzda eğer bir websitesi ve/veya App serve ediyorsanız mutlaka ihtiyacınız olan SSL bağlantısından ve bununla bağlantılı olarak openssl kütüphanesinden bahsedeceğim. SSL (Secure Socket Layer) ve TLS (Transport Layer Security) sunucunuza bağlanmak isteyen kişileri siteniz ile güvenli şekilde iletişim kurmasına imkan sağlayan bir bağlantı şeklidir. Eskiden SSL v1-v3 arasında değişen sürümler mevcut ve siteler genelde bu SSL sürümlerini kullanırken artık SSL siteler tarafından terk edilmiş ve yerini daha güvenli olan TLS\u0026rsquo;ye bırakmıştır.","title":"Linux Sunucularda SSL güvenliğini arttırma"},{"content":"Linux Sunucularda SSH güvenliğini artırma Bugün sizlerle bir sunucu kiraladığınız zaman güvenli bir şekilde bağlanmamızı sağlayan SSH hizmetini nasıl daha güvenli ve dışarıdan gelecek kötü niyetli isteklerden uzak tutabiliriz bundan bahsedeceğim. Öncelikle süreci basit, önerilen ve ileri-seviye olarak üç farklı başlık altında anlatacağım. Başlık içerikleri kişisel gerekliliklere göre aşamalı düşünülmüştür. Başlıklar bir biri ile bağlantılı olmasına rağmen istenilen bir aşamada bırakılması sorun oluşturmayacaktır.\nBasit Güvenlik Önlemleri Öncelikle içinde bulunduğumuz Linux sürümünün paket yöneticisi ile güncellemeleri konsol üzerinden yüklememiz gerekmektedir.\nUbuntu için: sudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y Fedora için: sudo yum update -y Arch Linux için: sudo pacman -Syyu Güncellemeler yüklendikten sonra ise sunucunuzdaki (Benim olayımda Ubuntu) sshd servisini (ki bu servis dışarıdan ssh bağlantıları almanıza yarayan servistir) yapılandırmaya başlıyoruz. Öncelikle çok karıştırılması nedeniyle belirtmek gerekir ki ssh servisi ile sshd servisi farklı servislerdir. SSH servisi sunucunun başkaca bilgisayar veya sunuculara bağlanmasını yarayan servisken SSHD servisi başka bilgisayarların sizin sunucunuza bağlanmasını yani gelen bağlantıları karşılayan servistir.\nSSHD servisinin ayarlarının tutulduğu dosya genel itibariyle \u0026ldquo;/etc/ssh/sshd_config\u0026rdquo; konumunda bulunur. Bunu kendi kullandığımız metin editörlerinden istediğimiz biriyle ama sudo (yani yönetici) yetkilerine sahip bir kullanıcı ile açmamız gerekmektedir.\nUbuntu üzerinden devam edecek olursak\nsudo nano /etc/ssh/sshd_config # Ayar dosyasını açmaya yarayan komut Bulup değiştireceğimiz başlıklar\n#ClientAliveInterval 0 \u0026gt;\u0026gt; Başındaki hashtag işaretini kaldırıyoruz ve \u0026#34;0\u0026#34; olan değeri 300 yapıyoruz. Bu komut bağlantı kullanılmadığı (idle konumunda kaldığı) zaman kaç sn sonra bağlantının otomatik kapatılacağını düzenler #PermitEmptyPasswords no \u0026gt;\u0026gt; Başındaki hashtag işaretini kaldırıyoruz ve \u0026#34;no\u0026#34; olan değeri değiştirmiyoruz. Bu komut boş veya şifresiz kullanıcıların bağlanmasını engeller. Yani boş şifrelere izin vermez. X11Forwarding yes \u0026gt;\u0026gt; Eğer başında hastag var ise kaldırıyoruz yok ise \u0026#34;yes\u0026#34; olan değeri no olarak değiştiriyoruz. Bu komut sunucu üzerinde GUI arayüzüne sahip uygulamaları çalıştırma kolaylığı sağlamasına rağmen suistimal edilmesi mümkün bir durum olduğundan kapatıyoruz. #MaxAuthTries 6 \u0026gt;\u0026gt; Başındaki hashtag işaretini kaldırıyoruz ve \u0026#34;6\u0026#34; olan değeri 3 yapıyoruz. Bu komut şifrenizi kaç kez deneyebileceklerini düzenler. 6 sayısı gereksiz derece yüksek bir değer olup genel kabul 3 ve veya 4 olması yönündedir. #Protocol 2 \u0026gt;\u0026gt; Eğer başında hastag var ise kaldırıyoruz, böyle bir kayıt hiç yok ise \u0026#34;Protocol 2\u0026#34; şeklindeki değeri ilk bulduğumuz boşluğa ekliyoruz. Bu komut SSH\u0026#39;ın sadece en yeni protokolü ile bağlantıların yapılmasını sağlayarak eski protokolün açıklıklarından sizi korur. Ayarları yaptıktan sonra kontrol etmek isterseniz: \u0026ldquo;sudo sshd -t\u0026rdquo; komutunu kullanabilirsiniz. Eğer bir hata mesajı görmez iseniz \u0026ldquo;sudo systemctl restart sshd\u0026rdquo; veya \u0026ldquo;sudo service sshd restart\u0026rdquo; komutu ile ayarları uygulayıp servisi baştan başlatabilirsiniz\nÖnerilen ayarlar Bir önceki ayarlara ek olarak kullanıcı bazlı oturum açma, sadece güvenli anahtar kullanarak oturum açma ve Root kullanıcısı ile oturum açmayı kısıtlama gibi ek ayarlamalar yapacağız. Öncelikle yerel bilgisayarınızdaki kullanıcınız için bir gizli anahtar üretmeniz gerekiyor. Bunun için eğer linux tabanlı bir işletim sistemi kullanıyor iseniz\nssh-keygen -t rsa -b 4096 # yazdıktan sonra aşağıdaki sorulara cevap olarak istediğiniz şifreyi giriniz \u0026gt;\u0026gt;\u0026gt;\u0026gt; Enter passphrase (empty for no passphrase): [Press enter key] \u0026gt;\u0026gt;\u0026gt;\u0026gt; Enter same passphrase again: [Press enter key] veya ssh-keygen -t ecdsa -b 521 # Daha güvenli ve daha hızlı olan ekliptik anahtar üretir. Aşağıdaki sorulara cevap olarak istediğiniz şifreyi giriniz \u0026gt;\u0026gt;\u0026gt;\u0026gt; Enter passphrase (empty for no passphrase): [Press enter key] \u0026gt;\u0026gt;\u0026gt;\u0026gt; Enter same passphrase again: [Press enter key] Diğer sorulara Enter\u0026rsquo;a basarak cevap vermiş ve anahtar için belirli bir konum yazmamış iseniz anahtar çiftiniz (.pub= halka açık anahtar) / uzantısız olan gizli anahtar) /home/KULLANICI_ADINIZ/.ssh klasörüne kaydedilmiştir. Ürettiğiniz anahtarı sunucunuza tanıtmak için aşağıdaki kodu kullanabilirsiniz.\nssh-copy-id -i ~/.ssh/ANAHTAR_ISMINIZ.pub SUNUCUDAKI_KULLANICI_ADINIZ@SUNUCU_IP_ADRESI # yazdıktan sonra kullanıcınızın şifresini sorucak ve doğru girdiğiniz takdirde onay mesajı ile karşılaşacaksınız. Kendi anahtarınızı ürettikten sonra sunucuya sadece anahtar ile erişmek için; Bulup değiştireceğimiz başlıklar\n#PasswordAuthentication no \u0026gt;\u0026gt; Başındaki hashtag işaretini kaldırıyoruz ve \u0026#34;no\u0026#34; olan değeri no olarak bırakıyoruz. Bu komut sunucuya şifre ile bağlanmayı engeller. Kullanıcılar sadece ssh_keyleri ile bağlanabilirler. PubkeyAuthentication yes \u0026gt;\u0026gt; Eğer var ise başındaki hastag işaretini kaldırıyoruz ve değeri yes olarak belirliyoruz. Bu komut az önce oluşturduğunuz gizli key ile oturum açmanıza izin veren komuttur. #PermitRootLogin no \u0026gt;\u0026gt; Başındaki hashtag işaretini kaldırıyoruz ve \u0026#34;no\u0026#34; olan değeri no olarak bırakıyoruz. Bu komut ROOT kullanıcısının ki en yetkili kullanıcıdır sunucuya erişmesini engelliyor. Ancak başka bir kullanıcı ile erişip sonra ROOT kullancısına geçiş yapabilirsiniz. AllowUsers KULLANICI_ADINIZ \u0026gt;\u0026gt; Eğer yok ise böyle bir kayıt ekliyoruz. Başka kullanıcıların sunucuya bağlanmasını ve/veya kullanıcı adı denemesi yapmasını engelliyor. LoginGraceTime 20 \u0026gt;\u0026gt; Eğer yok ise böyle bir kayıt ekliyoruz ve değeri 20 olarak ayarlıyoruz. Oturum açmak için gereken süreyi saniye cinsinden belirliyor. Uzun süre oturum açma isteği ile sunucuyu meşgul etmelerini engelliyoruz. ChallengeResponseAuthentication no \u0026gt;\u0026gt; Var ise başındaki hastag işaretini kaldırıyoruz ve değeri no olarak belirliyoruz. Bu komut diğer oturum açma yöntemlerini devre dışı bırakıyor. KerberosAuthentication no \u0026gt;\u0026gt; Var ise başındaki hastag işaretini kaldırıyoruz ve değeri no olarak belirliyoruz. Bu komut diğer oturum açma yöntemlerini devre dışı bırakıyor. GSSAPIAuthentication no \u0026gt;\u0026gt; Var ise başındaki hastag işaretini kaldırıyoruz ve değeri no olarak belirliyoruz. Bu komut diğer oturum açma yöntemlerini devre dışı bırakıyor. Ayarları yaptıktan sonra kontrol etmek isterseniz: \u0026ldquo;sudo sshd -t\u0026rdquo; komutunu kullanabilirsiniz. Eğer bir hata mesajı görmez iseniz \u0026ldquo;sudo systemctl restart sshd\u0026rdquo; veya \u0026ldquo;sudo service sshd restart\u0026rdquo; komutu ile ayarları uygulayıp servisi baştan başlatabilirsiniz\nİleri Seviye Ayarlar Öncelikle standart SSH bağlantı portu olan 22 yi değiştirip ardından SSH bağlantısı sırasında kullanılan şifreleme araçlarını daha da güçlü hale getireceğiz. Ardından sunucunu SSH hizmetinin loglarının (kayıt defteri kayıtlarının) nasıl tutulacağını belirleyeceğiz.\nBulup değiştireceğimiz başlıklar\n#Port 22 \u0026gt;\u0026gt; Bunu bulup başındaki hastag işaretini kaldırıyoruz ve oraya başka hizmet tarafından kullanılmayan ve açık olan bir port numarasını yazıyoruz. Örneğin 2992 olabilir. LogLevel INFO \u0026gt;\u0026gt; Bu ayarı bulup değiştiriyoruz yok ise ekliyoruz. Kayıt seviyesini belirlememize yarıyor. AllowAgentForwarding no \u0026gt;\u0026gt; Bu ayarı bulup değiştiriyoruz yok ise ekliyoruz. Alternatif yönlendirme yöntemlerini devredışı bırakıyor. AllowTcpForwarding no \u0026gt;\u0026gt; Bu ayarı bulup değiştiriyoruz yok ise ekliyoruz. Alternatif yönlendirme yöntemlerini devredışı bırakıyor. PrintMotd no \u0026gt;\u0026gt; Bu ayarı bulup değiştiriyoruz yok ise ekliyoruz. Bağlantı kurulmadan önce sunucu ile ilgili bilgi sahibi olmalarını engellemek için. PermitUserEnvironment no \u0026gt;\u0026gt; Bu ayarı bulup değiştiriyoruz yok ise ekliyoruz. PermitTunnel no \u0026gt;\u0026gt; Bu ayarı bulup değiştiriyoruz yok ise ekliyoruz. Daha da ileri giderek SSH bağlantısı sırasında kullanılan şifreleme algoritmalarını, doğrulama algoritmalarını, anahtar değişim algoritmalarını ve diğer algoritmaların hangilerinin öntanımlı olacağını belirliyoruz.\nRoot kullanıcısı veya sudo yetkisine sahip bir kullanıcı ile aşağıdaki komutları sırasıyla çalıştırıyoruz.\n1] rm /etc/ssh/ssh_host_* 2] ssh-keygen -t rsa -b 4096 -f /etc/ssh/ssh_host_rsa_key -N \u0026#34;\u0026#34; 3] ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -N \u0026#34;\u0026#34; 4] awk \u0026#39;$5 \u0026gt;= 3072\u0026#39; /etc/ssh/moduli \u0026gt; /etc/ssh/moduli.tmp 5] mv /etc/ssh/moduli.tmp /etc/ssh/moduli 6] sed -i \u0026#39;s/^\\#HostKey \\/etc\\/ssh\\/ssh_host_\\(rsa\\|ed25519\\)_key$/HostKey \\/etc\\/ssh\\/ssh_host_\\1_key/g\u0026#39; /etc/ssh/sshd_config 7] echo -e \u0026#34;KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com\\nHostKeyAlgorithms ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,sk-ssh-ed25519-cert-v01@openssh.com,rsa-sha2-256,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com\u0026#34; \u0026gt; /etc/ssh/sshd_config.d/ssh-hardening.conf Ayarları yaptıktan sonra \u0026ldquo;sudo sshd -t\u0026rdquo; ve ardından eğer bir hata mesajı görmez iseniz \u0026ldquo;sudo service sshd restart\u0026rdquo; komutu ile ayarları uygulayıp servisi baştan başlatın. Artık yeni belirlediğiniz port üzerinden ve sadece sizin gizli anahtarınız ile sunucuya bağlanabileceksiniz. Bağlanmak için ise;\nssh -i ~/.ssh/ANAHTAR_ISMINIZ SUNUCUDAKI_KULLANICI_ADINIZ@SUNUCU_IP_ADRESI -p PORT_NUMARASI # komutunu kullanabilirsiniz. Gelen bildirimlere Enter deyip devam edebilirsiniz. Son Bu yazı daha önce https://teknolojirehberleri.xyz adresinde yayımlanmıştır. Kişisel portfolyo oluşturmak adına şahsi sitemde yeniden yayımlama ihtiyacı hissettim.\n","permalink":"https://wiseweb-works.github.io/blog/post/ssh-guvenligi/","summary":"Linux Sunucularda SSH güvenliğini artırma Bugün sizlerle bir sunucu kiraladığınız zaman güvenli bir şekilde bağlanmamızı sağlayan SSH hizmetini nasıl daha güvenli ve dışarıdan gelecek kötü niyetli isteklerden uzak tutabiliriz bundan bahsedeceğim. Öncelikle süreci basit, önerilen ve ileri-seviye olarak üç farklı başlık altında anlatacağım. Başlık içerikleri kişisel gerekliliklere göre aşamalı düşünülmüştür. Başlıklar bir biri ile bağlantılı olmasına rağmen istenilen bir aşamada bırakılması sorun oluşturmayacaktır.\nBasit Güvenlik Önlemleri Öncelikle içinde bulunduğumuz Linux sürümünün paket yöneticisi ile güncellemeleri konsol üzerinden yüklememiz gerekmektedir.","title":"Linux Sunucularda SSH Güvenliği Artırma"},{"content":"Maximum Kart’ın artık müze kartı olarak geçerli olmadığı şu günlerde “Zaten müze müze gezip de ne yapacağız, biz Cem Yılmaz izliyoruz o bize yetiyor” şeklinde düşünen arkadaşlar için bir içerik hazırladım. Bildiğiniz veya benim de uydurmuş olabileceğim üzere İş bankasının maximum kart departmının Cem Yılmaz ve diğer sanatçılar ile yapmış olduğu 4–6 reklamlık bir iş birliği (PR) anlaşması mevcuttu. Bu süreçte bankanın ve kartın kullanımını teşvik edecek ve aynı zamanda da Cem Yılmaz üzerinden bilinirliliğini artırıcı bir takım reklamlar çekildi ve basında yayımlandı. Bu reklamdan büyük bir çoğunluğu son kullanıcıya hitap eden ve direkt ürünün olduğu yerde (market, kafe v.b.) çekilmiş reklamlar olmasına rağmen içlerinden bir tanesi tamamen başka bir atmosferde çekilmişti. Sadece müze kart övmesi için bu kadar prodüksiyona ne gerek vardı diye düşünürken Cem Yılmazın böyle ilginç içerikleri çok sevdiği ve çok az kişinin anladığı ufak espiriler bıraktığı aklıma geldi. Mesela meşhur G.O.R.A filmindeki “evet evet tarafından” espirisinin bir dönem anlaşılmamış olması ve Cem Yılmazın bizatihi kendisi tarafından açıklanması sonucunda meşhur olması gibi. İşte ben de bugün sizlerle bu reklamı inceleyecek ve üzerine bir şeyler söyleyeceğim.\nÖncelikle reklamın tümünde geçen replikler veya arka planların hepsi büyük özenle seçilmiş yerler. Hani bir savaş sahnesi canlandıralım diye yapılmış şeyler değil. Reklamın başladığı yer o dönem Galyalılara ait olan ve Vercingetorix tarafından yönetilen 80.000 kişi ile en büyük Galya şehri olan Alesia’dır. Yapılan savaş da şehirden ismini alan Alesia savaşıdır. Savaş M.Ö 52 yılında Sezar komutasındaki 12 lejyonla (30,000–60,000 kişi)’nin günümüzdeki Paris sınırları içerisinde kalan Alesia şehrini kuşatması sonucunda çıkıyor. Tüm Avrupayı neredeyse fetheden Roma İmparatorluğu bir türlü bu Galyalıları (Fransa civarlarında) yenemiyor. En sonunda direkt saldırmaya karar veriyorlar ama bilmiyorlar ki Galyalılar savunmada acayip iyiler. Gerçekten de beklenilen oluyor ve Galyalılar kaleye çekiliyor. Sezar ne yaptıysa kaleye yaklaşamıyor ve surları aşamıyor. Adamları açlık ile karşı karşıya bırakmış olmasına rağmen Galyalılar teslim olmuyor bir türlü.\nAlesia Savaşı Günümüzde Olsaydı Videonun daha ilk saniyede gözüken sarımsı bayrak Galyalıların kullandığı renk olup tahminimce eski bayraklarından birisidir. Normalde bayrakları yine o renk olmak üzere bir kartal-kuş türünü barındıran bir bayraktır ama renk direkt bu. Truva atı olayı M.Ö 13. yy da geçen ve yine Paris civarlarında yapılan bir taktiktir. Yine o civarda yaşamış Akhalılar tarafından yapılan iş bu taktik bu yüzden “daha önce denendi olmaz” deyip geçiyor. Sonrasında ise Brütüs’e dönüp “sen dur” veya “sen de var ya” der gibi bakması ve mimikleri Sezar ile Brütüs arasındaki bıçaklama olayına bir gönderme. Maximus ismi direkt maximum karta bir atıf olmasının haricinde filmde bu neyin kafası diyen (o dönemki lider) Sezardan sonraki adama gönderme. Tam adı Marcus Maximus Aurelius Antoninus Augustus olan ve sezardan sonra hüküm süren bir lider. Sonunda geçen “Biz buraya Sezarı övmeye değil gömmeye geldik.” sözü de orada beyaz kafası gözüken Marcus Antonius’a bir göndermedir. Kendisi Sezar’a suiskastten yargılanmış birisidir. Bence bu haliyle (benim yakalayabildiğim) reklam efsane kurgulanmış. Son olarak ilk kredi kartının çıkış tarihi ile Savaş tarihi olan M.Ö 52 arasında yaklaşık 2.000 Yıl olması da bir tesadüf değildir diye düşünüyorum.\nRubicon nehrini geçmek özdeyişi adını İtalya’da bulunan rubicon nehrinden alır. Roma Cumhuriyeti döneminde komutanlar askeri güçleri ve kimlikleri ile başkente giremeyeceği ve demokrasiye aykırı bir eylem olarak görüldüğü için Roma şehir sınırlarından biri olan Rubicon nehrini geçmek askerlere yasaklanmıştı. Roma’yı ele geçirmek isteyen komutanlar ilk eylem olarak bulundukları karargahtan çıkarak Rubicon nehrini geçer ve bu artık geri dönüşü olmayan bu yola girerlerdi. Bu öyle bir yoldu ki artık kararlarından vazgeçseler bile cezalandırılacaklardır. O yüzden Rubicon’u geçmeyi çok iyi hesaplamak, çok iyi düşünmek gerek. Maximum Kart Cem Yılmaz ile böyle bir reklam yaparak bence kitleleri etkileyecek bir şey yapmak istemiş olsa da kimsenin farketmeyeceği ama bence çok güzel bir reklama imza attılar.\nBütün bu anlatımlardan sonra “bize maximum kart tarafından böyle bir şey söylenmedi” veya “kafandan uyduruyorsun bütün bunları” diyecekseniz sizi bonus sahneye alayım.\nNOT: Bu yazı daha önce şahsi medium.com adresimde yayımlanmıştır. Kişisel portfolyo oluşturmak adına şahsi sitemde yeniden yayımlama ihtiyacı hissettim.\n","permalink":"https://wiseweb-works.github.io/blog/post/maximum-kart-reklami/","summary":"Maximum Kart’ın artık müze kartı olarak geçerli olmadığı şu günlerde “Zaten müze müze gezip de ne yapacağız, biz Cem Yılmaz izliyoruz o bize yetiyor” şeklinde düşünen arkadaşlar için bir içerik hazırladım. Bildiğiniz veya benim de uydurmuş olabileceğim üzere İş bankasının maximum kart departmının Cem Yılmaz ve diğer sanatçılar ile yapmış olduğu 4–6 reklamlık bir iş birliği (PR) anlaşması mevcuttu. Bu süreçte bankanın ve kartın kullanımını teşvik edecek ve aynı zamanda da Cem Yılmaz üzerinden bilinirliliğini artırıcı bir takım reklamlar çekildi ve basında yayımlandı.","title":"Maximum Kart reklamı Rubicon nehrini geçti mi?"},{"content":" PGP Türkçede oldukça iyi gizlilik anlamına gelen Pretty Good Privacy kelimesinin baş harflerinde oluşturulmuş bir veri şifreleme, şifre çözme ve verileri elektronik olarak imzalama programıdır. Phil Zimmermann tarafından 90\u0026rsquo;lı yılların başında akademik bir makale olarak ortaya çıkmış ve yayımlandığı dönemden çok sonra gerçekten kullanılmaya ve getirilerinden yararlanılmaya başlanmıştır. Söz konusu program ilk ortaya çıktığı zamanlarda bir ihtiyacın kendisini ortaya çıkmaya zorlamasından ziyade daha çok bir düşünce deneyi olarak iletişimin her iki tarafı arasındaki verilerin şifrelenebileceği ve bunun nasıl yapılması gerektiği sorusu üzerine ortaya çıkmıştır. Ortaya çıkışının ardından gönderilen verilen şifrelenmesinin ve şifresinin taraflarca çözülmesinin yanına bir de verinin bütünlüğünün korunmasını sağlayan özet fonksiyonu ve mesajı gönderen kişinin kimliğinin doğrulanması sağlayan (ve kimi zaman inkar edilemezlik olarak da anılan) imzalama özelliği eklenmiştir. Ortaya çıktığı dönemde ve sonrasında açık kaynak kodlu olarak yayımlanmaya devam etmiş ve günümüzde OpenPGP adı altında gelişerek faaliyetlerine devam etmektedir. PGP’nin ortaya çıktığı 1991 yılından 6 sene sonra yani 1997 yılında kendilerine Internet Engineering Task Force (görev gücü biraz abartı olmadı :D) adını veren bir çalışma grubu PGP programının sağlamış olduğu şifreleme özelliklerinin piyasa standartı haline gelmesi ve kullanımının kolaylaştırılması için yazılar yayımlamaya başladılar.\nhttps://zappysys.com/blog/ssis-pgp-encryption-decryption (Erişim Zamanı: 08.04.2023) PGP’nin şifreleme ve şifre çözme özelliklerinin nasıl çalıştığını ve internet alemi için neden bu kadar büyük bir atılım anlamına geldiğini insanlara anlatmaya başladılar. PGP asimetrik şifreleme denilen ve günümüzde internet tarayıcılarından elektronik imza ile girişi destekleyen tüm internet sitelerinde ve özellikle bankalarda kullanılan bir şifreleme/şifre çözme şeklidir. Asimetrik şifrelemeden kısaca bahsedersek eğer (sadece asimetrik şifrelemeyi tüm detaylarıyla anlatan bir yazı da gelecek) şifrelemeyi yapan anahtar ile şifrelenmiş veriyi açacak olan anahtarın farklı olduğu ve birbirlerinden üretildiği bir şifreleme türüdür. Bu şifreleme türünde sizin public (genel) anahtarınız ve private (gizli) anahtarınız mevcuttur. Bu anahtarlardan birisi ile yapılan şifrelemeyi aynı anahtar açamayıp sadece diğer anahtar ile açılması/çözülmesi mümkündür. Daha kolay anlaşılması için bir örnek üzerinden gidelim. Eskiden çelik kapılarda ve kepenklerde bolca kullanılan asma kilitleri gözümüzün önüne getirelim. Şimdi bu kilitler üretildiği zaman bu kilidi açabilecek anahtar da yanında üretilip son kullanıcıya yanında veriliyor. Bana şifreli bir şekilde bir yazı veya bir dosya göndermek istediğinizi düşünelim. Görece olarak güvenli bulduğunuz bir kutuya bana göndermek istediğiniz dosyaları koyup daha sonra da benden almış olduğunuz şahsi asma kilidimi üzerine takıyorsunuz. Bu aşamada benim size vermiş olduğum tek şey bir asma kilit ve anahtarlar hala bende. Kutu kapatıldıktan ve asma kilit üzerine takıldıktan sonra asma kilidin demirlerini ittirerek içine geçirip kutuyu tamamen kilitli bir hale getiriyorsunuz. Bu aşamadan sonra size vermiş olduğum asma kilidi kullanarak kutuyu açma imkanınız yok hatta içine koyduğunuz şeyleri de artık kapattıktan sonra tekrar değiştirmeniz mümkün değil. Benim aynı asma kilitten yüzlercesine sahip olduğumu ve hepsinin aynı ve sadece bende olan bir anahtar ile açıldığını düşündüğünüzde etrafımdaki insanlara anahtarsız bir asma kilit vermenin çok da sorun olmayacağından emin olabilirsiniz. Asimetrik anahtar ile şifreleme yapılırken de gizli (private) anahtarınız ile yüzlerce genel (public) anahtar üretebilirsiniz fakat private keyiniz her zaman için tekdir. Artık benim kilidim ile kilitlenmiş kutuyu bana göndermeniz ve benim de onu kendime ait gizli anahtar ile açmam sonucunda güvenli bir şekilde bir iletişim sağlamış olduk.\nPGP’nin bize sağlamış olduğu bir anahtar ile şifreleyip sadece diğer anahtar ile o verinin açılabilmesi özelliği dönemi için çok üst düzey bir şifreleme ve güvenlik işleviydi. Şifreleme için kullanılan anahtarların uzunluğu 2048 Bit, 3072 Bit ve 4096 Bit boyutundaydı. 1 Bitin 8 Bayt olduğunu düşünürseniz bu sayıların hem bir insan için hem de o dönemin bilgisayarları için oldukça büyük sayılar olduğunu anlamışsınızdır. O dönem daha hızlı olması (düşündüğünüz kadar hızlı değil) için en düşük anahtar boyutu olan 2048 Bit kullanılmış olup genel olarak gönderilen maillerin içeriğinin (sadece içerik kısmı) ve ekte gönderilen dosyaların şifrelenmesi şeklinde kullanılmıştır. 2048 Bit yerine en yüksek anahtar boyutu olan 4096 Bit kullanıldığı zaman her ne kadar anahtar boyutu 2 kat artmış olsa da hız yerine göre 4 ile 10 kat arasında azalmaktaydı. Ortalama 200–400 karakterden oluşan bir salt yazının şifrelenmesi sırasında en düşük anahtar boyutu ile şifrelenmesi bilgisayarınızın gücüne bağlı olarak 1 ila 10 sn arasında değişebiliyordu. Bu nedenle daha uzun anahtar boyutuna sahip 4069 Bit’in şifreleme süreci çok uzun sürmekteydi. Şimdi bakıldığında 1–2 dk gibi süreler çok kısa gibi gelse de sadece bir metni göndermek için bu kadar beklemenizin gerekiyor olması o dönem için gerçekten can sıkıcıydı. Üstelik sizin şifreleme sürecinde beklediğiniz kadar da şifrelemeyi çözecek anahtara sahip kişiyi de çözüm sırasında bekletiyordunuz.\nPGP ile veri gönderilmesi ile ilgili bir örnek ile devam edelim. Mesela sizin için çok önemli olan bir veriyi göndermek istiyorsunuz. Önce farazi olarak (umarım nükleer fırlatma kodları değildir) bir yazılı metin seçelim. Benim seçtiğim veri:\n“u, iki u daha, birincisi küçük u, ikincisi büyük u, 1 j, 3 3 3( üç tane 3 rakamı ama üçüncüsü küçük 3), yumuşak g, 6 a, k, küçük hığıı, 6 milyon. iki milyar. ama iki milyar yazıyla” ALINTI\nÖnce bu veriyi… arkadaşlar yazıyı yazarken sıkıldım. Kusura bakmayın bunu da bu kadar anlatmış olayım. Ben keyfime düşkün bir adamım sıkılınca yapamıyorum.\nNOT: Bu yazı daha önce şahsi medium.com adresimde yayımlanmıştır. Kişisel portfolyo oluşturmak adına şahsi sitemde yeniden yayımlama ihtiyacı hissettim.\n","permalink":"https://wiseweb-works.github.io/blog/post/pgp-ve-gizlilik/","summary":"PGP Türkçede oldukça iyi gizlilik anlamına gelen Pretty Good Privacy kelimesinin baş harflerinde oluşturulmuş bir veri şifreleme, şifre çözme ve verileri elektronik olarak imzalama programıdır. Phil Zimmermann tarafından 90\u0026rsquo;lı yılların başında akademik bir makale olarak ortaya çıkmış ve yayımlandığı dönemden çok sonra gerçekten kullanılmaya ve getirilerinden yararlanılmaya başlanmıştır. Söz konusu program ilk ortaya çıktığı zamanlarda bir ihtiyacın kendisini ortaya çıkmaya zorlamasından ziyade daha çok bir düşünce deneyi olarak iletişimin her iki tarafı arasındaki verilerin şifrelenebileceği ve bunun nasıl yapılması gerektiği sorusu üzerine ortaya çıkmıştır.","title":"PGP nedir ve gerçekten de oldukça iyi bir gizlilik sağlıyor mu?"},{"content":"Nerede doğduğunu bilmediğimiz Grigori Rasputin isimli bu arkadaşın çocukluk yılları daha çok Sibirya geçiyor. Mavi gözleri ve etkileyici mimikleri var. Daha küçük yaştan itibaren insanları etkilemeyi ve ilgi çekmeyi başaran bir yapısı mevcut. Hatta bir keresinde yaşı küçük olmasına rağmen babasının çiftliğinden çalınan bir atı kimin çaldığını kehanet yoluyla tahmin eder. Herkes (babası da dahil) Rasputin’e inanmamış olsa da sonradan hırsız kendisi gelip suçunu itiraf eder. Bu olaydan sonra ailesi ve bütün çevresi onun gerçekten doğaüstü güçlere sahip olduğunu düşünmeye başlamıştır.\nBüyüdükten sonra ailesi tarafından Rusyanın başka bir bölgesine gönderilir ve burada manastırda eğitim almaya başlar. Fakat kehanetleri azalmadığı gibi artmaya da başlar. İlgileri yine üzerine çekmeyi başarır burada da. Öyle ki 1904 yılında Çar Romanov’un küçük oğlu Aleksi’nin hemofili olduğunu öğrenir ve çocuğu ancak kendisinin tedavi edebileceğini iddia eder. Yine bir vaazında 1. Dünya Savaşından ve yaklaşmakta olan Bolşevik devriminden bahseder. Tarih tabiiki de onun yanılmadığını bize gösterecektir. Artık saraya çok yakındır ve vaazlarında Aleksi’nin hastalığını kendisinin tedavi edebileceğini çariçe Aleksandrova’ya açıklar. Çariçe kendisini saraya çağırır ve böylelikle Petersburg ve Kremlin saraylarının kapıları Rasputin’e sonuna kadar açılmış olur.\nKısaca hayatından bahsettikten sonra Boney M. grubunun şarkısında daha çok geçen ve ölümünü (!) anlatan kısma gelmek istiyorum. Bu kısımdan sonra anlatılanlar bir miktar yoruma dayalı olmakla birlikte anlatılanlar arasında tam bir mutabakat yoktur.\nRasputin, Prens Yusufov tarafından bir davete çağrılır, fakat Prens, Rasputin’i kendisi ile özel bir konuda görüşmek bahanesiyle davetten önce evine daha bütün misafirler gelmeden ayrı getirtir. Durum oldukça gariptir, Rasputin’i bahçe tarafında bodrum katında bir odaya indirirler fakat ikramda kusur yoktur. Siyanürle hazırlanan kurabiyeler ve yine siyanürlü şarap sunulur Rasputin’e. Merakla Prens’in ne anlatacağını bekleyen Rasputin, kurabiyeleri afiyetle yer ve hatta şaraptan da birkaç kadeh içer. Bir türlü konuya girmeyen ve lafı geveleyen Prens, Rasputin’e hiçbir şey olmadığını görünce telaşa kapılır, müsaade ister ve komployu hazırladığı ve yine evde başka bir odada onu bekleyen İngiliz ajanından yardım ister. İngiliz ona bir silah verir ve sessizce bu işi bitirmesini söyler. Prens silahı alır, odaya gider ve iki el ateş eder, başından ve boynundan yaralanan Rasputin yere yığılır. Komplocu Prens bu işi bitirdiğini zannederek yukarı çıkar ve diğer işbirlikçileri aşağıya çağırır. Fakat iki metrelik bu dev Sibiryalıyı öldürmek o kadarda kolay değildir. Prens ve komplocular odaya girdiklerinde Rasputin ayaktadır, ölmemiştir. Rasputin kendisini bahçeye atar ve kaçmaya başlar. Fakat katiller peşine düşerler ve Rasputin bahçe duvarını aşacakken arkasından ateş ederler ve durdururlar. Artık bu tehlikeli adamı öldürdüklerini düşünürler ve cesedini neva nehrine atarlar. Ceset birkaç gün sonra nehirden çıkarılır, otopsi yapılır. Otopsi raporuna göre Rasputin kurşunlardan değil ciğerine dolan sudan, yani boğularak ölmüştür. Onu öldürmek hiçte kolay olmamıştır anlaşılan.\nBurada bir parantez açmak istiyorum. Boğulan ve ciğerler patlayarak dışarı çıkan birinin sadece birkaç organının zarar görmüş olacağını düşünmek mantıksız. Hem cildi hem de diğer bütün hayati organları zarar görmüştür bu olaylar sonunda. Kendisini bulduklarını düşündükleri zaman teşhis etme konusunda emin olamamışlardır. Bu yüzden ben o anda dahi ölmediğini ve efsaneler aslını yaşatır kuralı gereğince hayatına bir süre daha devam ettiğini düşünüyorum. Kendisi aynı zamanda rasPUTİN ismine sahip olduğu ve Rusyanın en önde gelen şahsı ile isimleri benzediği için şarkıları son zamanlarda oldukça ön planda. Gerçi Putin başta oldu olalı bu şarkılar ön planda ama şu son 5–6 senedir bu şarkılar üzerinden Putin övmesine doyamadılar maalesef. Hatta “Rasputin — Funk Overload” adlı videoda Boney M. grubunun yapmış olduğu şarkıya bir animasyon ile farklı bir hava katmışlar. Ayrıca ilgili videonun içinde Putin ile ilgili bir bonus bölüm de mevcut. Hem eğlenceli hem de remix tarzı bir video olmuş. Bu kısa yazımız maalesef bitti.\nBu hikayeyi yazarken faydalandığım siteleri kaynakça gibi eklemek isterdim ama paralel evrende şu anda tam olarak 10 dk geçti ve benim daha önemli işlerim var. O yüzden sevgili (!) Putine bir selam çakıp aranızdan ayrılıyorum.\nNOT: Bu yazı daha önce şahsi medium.com adresimde yayımlanmıştır. Kişisel portfolyo oluşturmak adına şahsi sitemde yeniden yayımlama ihtiyacı hissettim.\n","permalink":"https://wiseweb-works.github.io/blog/post/grigori-rasputin/","summary":"Nerede doğduğunu bilmediğimiz Grigori Rasputin isimli bu arkadaşın çocukluk yılları daha çok Sibirya geçiyor. Mavi gözleri ve etkileyici mimikleri var. Daha küçük yaştan itibaren insanları etkilemeyi ve ilgi çekmeyi başaran bir yapısı mevcut. Hatta bir keresinde yaşı küçük olmasına rağmen babasının çiftliğinden çalınan bir atı kimin çaldığını kehanet yoluyla tahmin eder. Herkes (babası da dahil) Rasputin’e inanmamış olsa da sonradan hırsız kendisi gelip suçunu itiraf eder. Bu olaydan sonra ailesi ve bütün çevresi onun gerçekten doğaüstü güçlere sahip olduğunu düşünmeye başlamıştır.","title":"Grigori Rasputin ve aynı isimli şarkı hk"},{"content":" Uzun uzun bir zaman önce (!) pek de uzak olmayan bir galakside yaşayan insanlar internet üzerinden yapmış oldukları işlemlerin daha güvenli bir temele oturması ve bu iletişimin tarafları dışındaki üçüncü kişilerin bu iletişimi dinleyememesi ve hakkında bilgi sahibi olamaması için bir takım şifreleme yöntemleri geliştirmeye karar verirler. INTRO\nDaha önceden üniversitelerin matematik ve bilgisayar programcılığı bölümlerinde yapılmış akademik çalışmaların ötesine geçememiş olan şifreleme (cryptography) alanı artık bireylerin iyiliği için kullanılacaktı. Bu ilke imza atacak ilk kişilerin arkadaş olmasının dışında onları birleştiren asıl şey Star Wars’ın orijinal üçlemesini çocuklukları döneminde birlikte izlemiş ve etkinlenmiş olmalarıdır. 1977 Yılında orijinal üçlemenin ilk, tarihsel sıralamaya göre ise dördüncü film olan Star Wars A New Hope vizyona girmiş ve tüm çevreler tarafından beğeniyle izlenmişti. İlk filmin vizyona girişinden sonraki 3. ve 6. senelerde serinin beşinci ve altıncı filmleri olan The Empire Strikes Back ve Return of the Jedi de peş peşe vizyona girmiş ve seyircisinin filmden beklentisini ve serinin devamına olan isteğini artırmıştır. Serinin o dönemki yönetmeni George Lucas izleyenleri daha iyi bir üçlemeye hazırlamak adına orijinal üçlemenin üçüncü filminin vizyona girdiği tarih olan 1983 yılından 1999 yılına kadar seriye yeni film çıkarmamış ve teknolojik imkanların gelişmesini beklemiştir. Yani tarihsel üçleme efsanesinin ve de modern kriptografinin bence başladığı yıl olan 1999 yılına gelinene kadar. 90\u0026rsquo;lı yıllar kendilerini Cypherpunks olarak adlandıran ve açık kaynak kodunu yücelten, gizlilik ve bireyin anonimlik hakkı üzerinde bir manifesto yayımlayan, bilgisayar ve teknoloji ile birlikte büyümüş bir neslin dönemiydi. İnternetin ülkemize gelişi ve tüm dünyadaki internet ağının gelişmesi ile birlikte 2000\u0026rsquo;li yıllara girmeye yaklaştığımız dönemlerde kişi başına düşen bilgisayar sayısı oranı artmış ve her eve olmasa da birçok haneye geniş bant internet hizmeti ulaşmış bulunmaktaydı. İşte ülkemizde internet yeni yeni kabul görmeye ve kullanılmaya başlandığı dönemlerde yurt dışında bir arkadaş topluluğu World Wide Web (WWW)’in eksik taraflarından biri olan şifreleme ve gizlilik üzerine odaklanmaya başlamıştı bile.\nBasit anlatımıyla internet üzerinde bir websitesi barındırmamıza ve dünya üzerindeki herhangi bir bilgisayarın bu web sayfasına erişebilmesine imkan tanıyan bu servis temelde güzel olmasına rağmen çok büyük bir dezavantajı vardı. Bu dezavantaj bağlanmış olduğunuz internet sitesi ile aranızdaki bağlantının herhangi bir şekilde şifrelenmemesi, güvenli olmaması ve dahili/harici üçüncü kişiler tarafından bu iletişimin izlenebilir, değiştirilebilir ve dahi engellenebilir olmasıdır. Eskiden bir internet sitesine girdiğiniz zaman adres çubuğunda bir kilit simgesi ve aşağıda gördüğünüz gibi “Connection is secure” veya “Connection is not private” gibi bir bağlantının güvenli /güvensiz olduğunu düşündürecek bir bildirim yoktu. Çünkü o yıllarda bir internet sitesine üye olurken veya mail gönderirken iletişimin izlenebileceği veya bunu kötü amaçlar için kullanılabileceği henüz düşünülmemişti.\nBağlantı Güvenli Bildirimi Chrome Bağlantı Güvenli Değil Bildirimi Chrome Konunun girişine eklenmiş olan videoda 1977 yapımı Star Wars New Hope filminde (bunca yıldan sonra spoiler denemez artık) Galaktik İmparatorluk tarafından bütün galaksiyi yok edebilecek güçte ve devasa ölçekte bir ölüm yıldızı yapıldığının haberi alınır. Bu haberin alınması üzerine kendilerine Rebellion (isyancı) diyen bir grup bu ölçekte ve güçte bir geminin normal gemi savaşları ile yok edilemeyeceğini anlamış ve bu planları çalıp geminin zayıf noktalarını incelemeye karar vermişlerdir. Orijinal üçlemenin ilk filmi olmasına rağmen tarihsel olarak 4\u0026rsquo;ncü film olması nedeniyle filmin başlangıcında bu planların çalındığını fakat henüz inceleme imkanı bulunamadan planları çalan uzay gemisinin imparatorluk kuvvetleri ve meşhur Dart Vader tarafından kovalandığını görüyoruz. Kovalamacanın sonuna doğru ellerindeki planları güvenli bir şekilde isyan kuvvetlerinin ana karargahına göndermeleri gerektiğini fakat imparatorluk kuvvetleri tarafından takip edilirken bunun çok zor olacağını anlayan Prenses Leia kendisince en güvenli gördüğü yöntemi kullanarak R2-D2 sınıfı bir robotun belleğine planları yükler ve filmimiz burada başlar. Videonun başlangıcında Dart Vader ve imparatorluk kuvvetleri tarafından geminin tamamı aranmasına rağmen Ölüm Yıldızının çalınmış planları bir türlü bulunamaz. Her ne kadar asilerden biri olduğu bilinse de (henüz Dart Vader tarafından ispatlanamamış) Prenses Leia diplomatik bir resmi görevde olduğunu söylemiş ve kendilerine böyle bir verinin gelmediğini iddia etmiştir. Yapılan incelemede gemiden böyle bir verinin aktarıldığını gösteren bir bilgiye de rastlanamamış olması sevgili Vader’ımızı çokça kızdırmıştır.\nGünümüzden 21 sene önce vizyona girmiş olan The Phantom Menace filmi her ne kadar modern şifrelemeyi doğrudan etkilememiş olsa da bu bir grup kişiye yıllar önce izlemiş ve beğenmiş oldukları orijinal üçlemenin ilk filmini ve bence ilk sahnesini hatırlamalarına neden oldu. O dönem gelişmekte olan gizlilik, anonimlik ve güvenlik düşünceleri neticesinde filmi izledikten sonra eski günleri yad etmek ve düşüncelerini paylaşmak için bir kafede bir araya geldiler. Genel arkadaş muhabbetinden ve havadan sudan konuşulduktan sonra aralarından biri konuşmanın ve bence tarihin de seyrini değiştiren şu soruyu sordu:\nHow can I keep communication private and secure when sending Death Star’s stolen blueprints ?\nArkadaş grubu önce bir sessizliğe büründü ve soruyu soran kişi aynı ses tonuyla soruyu tekrarladı ve bu sefer sonuna “But without using R2-D2 or any kind of Droid :D” ekledi. Grupta yükselen gülüşmelerin ve filmle ilgili ardı ardına söylenen repliklerin ardından gruptaki kişiler birbirlerine bakarak bu soruna nasıl bir çözüm bulabileceklerini veya bunu kimin yapabileceğini düşünmeye koyuldular. Çok geçmeden bu soruya cevap bulabilecek kişilerin aslında bu sorunu ilk farkeden kişiler yani grup arkadaşları olduğunu anladılar. Hepsi ülkelerinde önemli üniversitelerden mezun olmuş ve alanlarında uzmanlaşmak, kendilerini geliştirmek için akademik kariyerlerine devam etmişlerdi. O dönem için böyle bir projenin yapılması için gerekli tüm matematiksel sorunların çözümü ile bilgisayarda yapılması gereken kodlamanın altından grup olarak kalkabileceklerini düşündüler. Grup olarak önce kullanıcıdan kaynaklı çözüm yöntemleri ile başlayıp ardından sunucular ve genele inen bir proje planı yaptılar. İlk olarak PGP (Pretty Good Privacy) adı ile anılan ve ilk dökümanlarının yayımlanmasının üzerinden neredeyse 8 sene geçmiş bir veri şifreleme-çözme yöntemi üzerinde durdular. Bu yöntemin (günümüzde nispeten daha güvenli olan) mail alışverişi sırasında kullanılmasının taraflar arasındaki gizliliği artıracağını düşündüler. Böylece kendilerine sormuş oldukları sorunun “güvenlik” kısmını irdelemeye başladılar ve bu başlangıç onları hiç tahmin edemeyecekleri yerlere ve kişilere götürdü. Onlar seçimini kırmızı hapı almaktan yana kullandılar. Böylece bilgisayardaki harikalar diyarının ve tavşan deliğinin ne kadar derin olduğunu tüm insanlara gösterme imkanı buldular. Yazı her ne kadar Star Wars filmi ile ilişkisi üzerinden devam etmiş olsa da Matrix filminin de aynı dönemde vizyona girdiği düşünüldüğünde böyle bir baş yapıttan etkilenilmediğini düşünmek yanlış olur.\nEğer yazının bu kısmına kadar gelmeyi başardıysanız merakınızın sizi bir yerlere sürüklediğini, siz istediğiniz ve ben kendimde yazma kuvveti bulduğum sürece bu tavşan deliğinin ne kadar derin olabileceğini birlikte keşfedeceğimizi anlamışsınızdır. Eğer her yerde anlatılan alışılmış hikayelerin ve kalıplaşmış kabullerin ötesinde bilgisayar ve insan arasındaki ilişkinin nasıl işlediğini, arka planda neler olduğunu öğrenmek istiyorsanız beni Twitter\u0026rsquo;dan ve şu an bulunduğunuz medium sitesinden takip edebilirsiniz. Sizlere şimdilik “her x günde veya x haftada bir yazı” şeklinde bir söz veremiyorum. Sizlere karşı verebileceğim tek söz benden bir şey beklemezseniz sizi bu konuda hayal kırıklığına da uğratamayacağım olacaktır. Yazı bitti. After credit sahnesini izlemek isteyenler için videomuza geçiyoruz.\nNOT: Bu yazı daha önce şahsi medium.com adresimde yayımlanmıştır. Kişisel portfolyo oluşturmak adına şahsi sitemde yeniden yayımlama ihtiyacı hissettim.\n","permalink":"https://wiseweb-works.github.io/blog/post/modern-kriptografi-star-wars/","summary":"Uzun uzun bir zaman önce (!) pek de uzak olmayan bir galakside yaşayan insanlar internet üzerinden yapmış oldukları işlemlerin daha güvenli bir temele oturması ve bu iletişimin tarafları dışındaki üçüncü kişilerin bu iletişimi dinleyememesi ve hakkında bilgi sahibi olamaması için bir takım şifreleme yöntemleri geliştirmeye karar verirler. INTRO\nDaha önceden üniversitelerin matematik ve bilgisayar programcılığı bölümlerinde yapılmış akademik çalışmaların ötesine geçememiş olan şifreleme (cryptography) alanı artık bireylerin iyiliği için kullanılacaktı.","title":"Modern kriptografi yöntemlerinin Star Wars filmi ile ilişkisi"},{"content":"Bir arkadaşım bana geçtiğimiz günlerde “istemediğin veya vazgeçtiğin zaman nasıl böyle umursamaz olabiliyorsun ?” diye sordu. Arkadaşımın da merak ettigi bu konudan bahsetmek istiyorum biraz.\nÖncelikle bunu neden yaptım sorusuna cevap vererek başlamak istiyorum. Cevabı çok basit. Canım böyle istiyor çünkü. Bunun adına koca bir felsefe yıkmaktansa sadece öyle istediğim icin yapmak bana daha mantıklı geldi. Siz de takdir edersiniz ki sevmediğiniz bir insanla veya grup ile konuşmak istemez hatta bir adım daha ötesi görmek istemezsiniz. Ben buna bir de vazgeçtiğim seyleri de ekledim. Sonuçta simdi uyguladığım davranış tarzı ortaya çıktı.\nKavga ettiğiniz veya tartıştığınız bir insan düşünün öncelikle. Ertesi gün okulda, sokakta muhtemelen tekrar göreceğiniz biri hem de bu kisi. Ve biliyorsunuz ki sonrasında bu sürtüşmelerin veya laf dalaşlarının devamı gelecek. Hele bir de bana genelde olduğu gibi yapışkan bir insan ile karşı karşıya iseniz isiniz bayağı zor olacaktır. Az veya çok bir sürenin sonunda (Cinnete beş kala) tamamen bağınız kopacak. Artık birbirimizi tanımıyor gibi davranacaksın ve görmek sizi o kadar da rahatsız etmeyecek, hatta umursamayacaksın.\nArdından benim sonradan eklediğim kısma gecelim. Üzerinde sürekli düşündüğünüz bir şey var. Bu sevdiğiniz bir kız/erkek de olabilir sizi bundan daha fazla düşünmeye iten bir şey olabilir veya birçok kisiye saçma gelebilecek ama sizin icin onemli daha birçok şey olabilir. Demek istediğimi anladınız örnekleri daha da uzatmaya gerek yok, zeki insanlarız hepimiz. Bu durumda sevgili Einstein’ın dediği veya benim kafamdan da uydurmuş olabileceğim gibi “Beyin bir düşünce düzeyine ulaştığında tekrar eski haline gelmesi oldukça zordur.” Ortalama bir hesap yaparsak 7–8 hafta kafanızı bu seye yorsanız. Bunun en az bir 3–4 hafta da düzelme süresi olsa hayatınızdan 10–12 hafta gitti demektir. Ki ben bunu saçmalık olarak adlandırıyorum.\nİste ben aradaki kısımları atlayıp direk sonuca varıyorum. Zaten tartıştığım, sevmediğim bir insanla bir süre daha devam etmek bana mantıklı gelmiyor çünkü. Kendimi buna mecbur et memeli diye düşünüyorum. Direk görmezden geliyorum. Düşünsel olarak beni yoran şeye gelince de vazgeçmem gerektiğini anladım veya bırakıyorum benden bu kadar dediğim zaman direk bırakıyorum. Koşan insanın birdenbire durması gibi yani. İlk is elimde ne var ne yoksa siliyorum, atıyorum veya unutuyorum(hı-hı dediğinizi duyar gibiyim). Ertesi gün sanki hiç böyle bir şey olmamış gibi davranıyorum. Ve ne olursa olsun bundan ödün vermiyorum.\nPeki bu şekilde davrandığı zaman ne gibi sıkıntılar ile karşılaşıyorum onu söyleyeyim. İnsanlar eski sisteme alıştıkları için gelip karşınıza size serzenişte bulunabiliyorlar. Siz de onları umursamayıp hatta sadece yüzlerine ne saçmalıyor bu gibisinden bakıp suskunluğunuzu bozmayınca çekip gidiyorlar. Bu sahne birkaç sefer daha tekrarlansa da sonuc genelde benim lehime oluyor. Siz bir zarar görmemiş oluyorsunuz ama karşınızdaki en uygun tabirleri küplere biniyor, sizin davranışlarınıza deli oluyor. Ama hiçbir şey yapamıyor çünkü duvara vurmak, kafa atmak gibi saçma bir hareket olur mu. Evet duvara kafa atmak. Hiç de saçma bir örnek değil bu. Duvarda sessiz sakin öyle durur. Sinirli olduğunda bazen duvara vuranlar ne bileyim yumruk atanlar, kafa atanlar oluyor. Sonuc ise hüsran oluyor.\nSimdi sonucun bu şekilde olacağını bildiğiniz zaman “umursamamak” düşündüğünüzden daha kolay oluyor. Çünkü artık bu konuda bir motivasyonunuz var. Ve şunu da söylemek gerekir ki bunu söyleyebilecek kafaya gelmek icin bir çok olay yaşadım. Çok saçma seyler yaptım ve tabiri olarak duvara tosladım. Dedim bir şeyler yapmak lazım. Geçmişe bakınca böyle bir şey yapmalı dedim. Bu yüzden sunu da anladım ki sevgili Steve’in dediği veya benim de uydurmuş olabileceğim gibi “Noktaları ileriye bakarak birleştiremezsiniz. Noktalar geriye baktığınızda birleşir.” Ben bugün baktığımda noktalar çok net birleşiyor. Ama biz de duvara çarpmak istiyoruz, noktaları biz de göreceğiz diyorsanız tercih sizin. Bildiğiniz gibi bütün uyuyanları uyandırmak için tek bir uyanık yeter. Ben üzerime düşeni yaptım.\nEğer söylediklerimi mantıklı bulduysanız, doğru geliyorsa, sizde öyle yapıyorsanız, yapmayı düşünüyorsanız, yardımcı olduysam veya olumlu bir şey söylemek istiyorsanız bana aşağıdaki yeşilli kalp simgesi veya ona benzeyen şeye basmanız gerekiyor. Zaten kaç kisinin okuduğunu, anlık görüntülenme oranını filan görüyorum. Benim icin önemli olan göremediğim ve sadece sizin bana iletebileceğin şey. Görüşleriniz. Ama sadece olumluları almak istiyorum. O yüzden sadece olumlu ileti butonu var. Olumsuzları görüşlerinizi bir A4 kağıdına yazın ve isiniz bitince kağıdı çöpe atın. Kesinlikle yere degil ama. Son.\nNOT: Bu yazı daha önce şahsi medium.com adresimde yayımlanmıştır. Kişisel portfolyo oluşturmak adına şahsi sitemde yeniden yayımlama ihtiyacı hissettim.\n","permalink":"https://wiseweb-works.github.io/blog/post/umursamazl%C4%B1k-uzerine/","summary":"Bir arkadaşım bana geçtiğimiz günlerde “istemediğin veya vazgeçtiğin zaman nasıl böyle umursamaz olabiliyorsun ?” diye sordu. Arkadaşımın da merak ettigi bu konudan bahsetmek istiyorum biraz.\nÖncelikle bunu neden yaptım sorusuna cevap vererek başlamak istiyorum. Cevabı çok basit. Canım böyle istiyor çünkü. Bunun adına koca bir felsefe yıkmaktansa sadece öyle istediğim icin yapmak bana daha mantıklı geldi. Siz de takdir edersiniz ki sevmediğiniz bir insanla veya grup ile konuşmak istemez hatta bir adım daha ötesi görmek istemezsiniz.","title":"Umursamazlık Üzerine"},{"content":"Bir gün muhabbet sırasında “Çevrem çok geniştir ama arkadaşlarım azdır dostlarım ise bi’kaç tanedir.” şeklinde bir cümle kurmuşum. Etrafımda şaşkınlığa yol açan bu cümle benim için alelade bir söz değildi. Fakat o anda anlatılacak kadar da basit değildi. Eve gidip üzerinde biraz düşünüp, anlamlandırıp, örneklendirip anlatılması gerektiğini düşündüm. Ve şimdi karşınızdayım (somut olarak olmasa da) ve bugün bu konuda konuşmak istiyorum.\nBu konuyu 2’e ayırıp incelemek istiyorum. İlk olarak çevreden ben ne anlıyorum, benim için ne anlam ifade ediyor bundan bahsetmek istiyorum. Bence insanın çevresi daha önce tanıştığı insanlar, tanışmamış olsa da hakkında ortalama bilgi sahibi olduğu insanlar veya da en azından aynı payda da yerleşebileceği insanlardır. Bunu söyle düşünebiliriz: üniversitede okuyorsunuz (en azından ben okuyorum) ve bir sürü insanla beraber günümüzün çoğunu geçiriyorsunuz. İlk adımda ortalama bir kısmı ile tanışıyorsunuz. Bu tanıştığınız kisi sayısı size ve arkadas grubunuza göre değişebilir. İkinci adımda gelip geçerken veya arkadas ortamında gördüğünüz, muhabbette adı geçen veyahut da kendiliğinden bir tanınırlığa sahip kişiler vardır. Bu zamana kadar tanımamışsınız demek ki daha da konuşmayacaksınız demektir. Üstelik bunlarla tanışmanız resmiyetten öteye geçmez. Zaten sizin ile olabilecekleri en iyi durumdadırlar. Fazlasını beklememek gerek. Üçüncü adımda ise belirli organizasyonlarda, önemli zamanlarda veya sizin için anlam ifade eden herhangi bir zamanda ortak paydada bir kesebileceğiniz insanlar vardır. Bunlar bir nebze vardır ama bir o kadar da yoklardır aslında. Her zaman göremezsiniz veya görmezlikten gelirsiniz. Ama işiniz düştüğünde veya lazım olduklarında -kısa veya uzun zamanlı- bir birlikteliğiniz olur. Sonrasında eski halinize iade.\nBu üç adımda anlattığım insanların hepsi sizin hareketleriniz veya sözleriniz ile olumlu/olumsuz olarak etkileyebileceğiniz veya harekete geçirebileceğiniz insanlardır. Bir piramit olarak düşündüğümüzde hepsi seviye seviyedir. Bulundukları seviye ile elde edilen etki orantılıdır. Bunu bir deprem dalgasına benzetebiliriz. Merkez üssünden uzaklaştıkça etki ve güç gittikçe azalır, kontrolü merkezden bağımsız olmaya baslar. Depremin yer altındaki merkezi birinci asamadır. En yüksek etki orada gözükür. Depremin yüzeye ilk çıktığı yer ise depremin ikinci etkili olduğu yerdir. Deprem dalgalarının son ulaştığı nokta ise üçüncü asamadır. Depremin zaman zaman etkili olduğu yerdir. Etki bazen gözükmektedir. Ben çevreden bunları anlamaktayım.\nKanunun 2’nci kısmına gelince arkadas ve dost ayrımını yapacağım. Ardından bu kavramların benim için ne ifade ettiğinden bahsedeceğim. Yukarıda çevremden bahsederken ilk aşamada tanıştığınız insanları söylemiştim. Bu tanıştığımız insanlar da gene kendi içinde 3’e ayrılıyor. İlk atama minimum seviyede samimiyettir. Ben buna arkadaşlık öncesi tanışıklık evresi diyorum. Tanıştığınız insanları gördüğünüzde en azından bir selam verirsiniz, yeri gelirse yan yana oturursunuz bazen de çay-kahve filan içersiniz. Çoğu zaman adını bile unutmuş olabilirsiniz. Ama bunu hiç belli etmezsiniz. İkinci aşamada ortalama bir samimiyetiniz vardır. Ben buna sizin de bildiğiniz arkadaşlık diyorum. Vaktinizin yeterli bir kısmını beraberce geçirirsiniz. Beraber ders çalışılır, yemek yer ve de belki en önemlisi okul dışında da etkileşimde bulunuyorsunuz. gezmeye çıkarsınız, telefonda konuşursunuz, dertlerinizi paylaşır, zamanla bir ritim tutturursunuz. Bu ritim tutturduktan sonra bir kısır döngü gibi kendini tekrar etmeye baslar. Ta ki biri bu döngüden sıkılıp seviyeyi daha ileriye götürmek isteyene veya artık bitirmek isteyene kadar. Benim için ikisi de benzer şeyleri ifade etmektedir. Çünkü bu istek sizi geri dönüsü olmayan bir yola götürür. Ya hep ya hiç misali bir sonuç elde edersiniz. Ya sevginizi açar birlikteliğiniz başka bir aşamaya taşırsınız, ya da arkadaşlığınızı dostluk aşamasına taşırsınız. İkisi hem aynı yeri ifade eder hem de bir o kadar farklı yerleri. Belirgin bir sekilde iki yol da tercih edilebilir. Ama aynı seviyeyi ifade etmelerine rağmen birbirinin yerini tutamayacağı kesindir. Ben şimdilik dostluktan bahsetmek istiyorum. Dostluk benim için basit bir tabirle sınırların ve engellerin bir çoğunun kaldırılmasıdır. O kadar ki artık konuşmadan da anlaşabilir, birbirinizin yerine hissedebilir, üzülebilirsiniz. Hareketlerinizi değerlendirmeden uygulayabilirsiniz. Çünkü artık kendi benliğinizden biriyle berabersiniz dir. Aranızda artık “acaba?” ve “keşkeler yoktur. geçirdiğimiz zamanları süper ve süper üstü olarak adlandırırsınız. En önemlisi de birbirinize güvenin çok yüksektir. Çünkü artık karşı karşıya değil yan yanasındır.\nBu kadar anlatımdan sonra asıl cevaba ulaşmak üzereyim. Neden samimiyet seviyesi arttıkça sayısal olarak azalma oluyor. Bu ters orantının sebebi nedir ? Cevabı bir ekonomi teorisinden ibaret: “Arz ile talep ters orantılıdır.” Yani az olan şey daha çok makbuldür. Bütün insanlarla iyi anlasan herkese dostum diyen bir insanın düşündüğünüz zaman aklınıza gelen ilk kelimeler büyük ihtimal “samimiyetsiz” ve “yalaka” olacaktır. Evet her ne kadar bunu fark etmesek de bir çoğumuz bu durumu kötü buluruz. Ben buna bir sebep daha ekliyorum. Samimiyet arttıkça o kişiye ayırmamız gereken ilgi, alaka, zaman artmakta. Doğal olarak bu kadar fazla karsı edimimizin olduğu bir kişiden çok fazla olmasını istemeyiz. Bunu söyle örnekleyebiliriz. Çocuk sahibi olmak isteyen bir anne düşünün. 2–3 tane çocuğu olduğu zaman optimal sekilde onlarla ilgilenebilir ve bundan mutluluk duyabilir. Ama 6–7 gibi yüksek sayılara ve belki de daha üstüne çıkıldıkça artık ne ilginin paylaştırılabilmesi mümkün olabilmekte ne de bu durumdan mutluluk alınabilmektedir.\nDurum tamamen bundan ibarettir sevgili arkadaşlar. Bir daha ki yazıda görene kadar güzel günler sizlerle olsun efendim. İyi günler.\nNOT: Bu yazı daha önce şahsi medium.com adresimde yayımlanmıştır. Kişisel portfolyo oluşturmak adına şahsi sitemde yeniden yayımlama ihtiyacı hissettim.\n","permalink":"https://wiseweb-works.github.io/blog/post/arkadaslik-ve-dostluk/","summary":"Bir gün muhabbet sırasında “Çevrem çok geniştir ama arkadaşlarım azdır dostlarım ise bi’kaç tanedir.” şeklinde bir cümle kurmuşum. Etrafımda şaşkınlığa yol açan bu cümle benim için alelade bir söz değildi. Fakat o anda anlatılacak kadar da basit değildi. Eve gidip üzerinde biraz düşünüp, anlamlandırıp, örneklendirip anlatılması gerektiğini düşündüm. Ve şimdi karşınızdayım (somut olarak olmasa da) ve bugün bu konuda konuşmak istiyorum.\nBu konuyu 2’e ayırıp incelemek istiyorum. İlk olarak çevreden ben ne anlıyorum, benim için ne anlam ifade ediyor bundan bahsetmek istiyorum.","title":"Arkadaslık ve Dostluk Üzerine"}]