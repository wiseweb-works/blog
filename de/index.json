[{"content":"Einführung und Zusammenfassung Heute lernen wir, wie man SSL-Zertifikate generiert, um sicherzustellen, dass der Datenverkehr zwischen einer von Ihnen verwalteten Website oder einem Anwendungsserver und Ihren Besuchern vertraulich / zuverlässig und überprüfbar ist. In meinen vorherigen Artikeln habe ich erklärt, wie und mit welcher Konfiguration Sie das von Ihnen erstellte Zertifikat bereitstellen würden. In diesem Artikel zeige ich Ihnen, wie Sie die Gleichung „weniger Brot, mehr Frikadellen“ aufstellen, also ein schnelleres und sichereres SSL-Zertifikat erstellen. Wenn Sie mit dem ACME-Protokoll von Let’s Encrypt vertraut sind (zum Zeitpunkt des Schreibens), ist es normalerweise möglich, ein 1024-4098 (wenn Sie sich zu sehr anstrengen, vielleicht 8196) Bit-Zertifikat mit einer asymmetrischen RSA-Schlüsselstruktur zu generieren und es für zu verwenden 90 Tage relativ. Das Generieren eines so großen Schlüssels, dessen Verwendung während des TLS-Handshakes nach der Generierung und die Kompatibilität mit den von den Besuchern verwendeten Geräten verursachen jedoch in den meisten Szenarien Probleme. Wenn beispielsweise 4096 Bit anstelle von 2048 Bit verwendet werden, bin ich bei einigen meiner Versuche mit 0,4-0,8 Sekunden längeren Handshake-Zeiten konfrontiert. Als ob es in Ordnung wäre, dass der Handshake so lange dauert, wird der Server dadurch zusätzlich belastet. Aber wenn Sie ein 384-Bit-ECC-Zertifikat anstelle von 4096-Bit-RSA generieren, erhalten Sie ein viel schnelleres Zertifikat und gleichzeitig eine Sicherheit, die 7680-Bit-RSA entspricht (wenn es diese Größe hätte).\nNun, Sie haben es gut erklärt, aber wo ist der Sinn dieser Arbeit, scheine ich Sie sagen zu hören. Ich werde Sie verärgern, aber dieses Geschäft hat keinen Sinn. Der Grund, warum dies nicht der Fall ist, ist in der Hintergrundmathematik verborgen. Ich werde kurz auf die kleinen Unterschiede in der Herstellung und Verwendung beider Zertifikate eingehen, erklären, wie und warum sie große Unterschiede verursachen, und im letzten Teil werde ich über etwas sprechen, das nicht als Bonus im Titel steht. (Für den Bonus musst du bis zum Ende lesen :D)\nProduktionsprozess des ECC-Zertifikats Zuerst müssen wir (wie immer) die neuesten Updates über die Konsole mit dem Paketmanager der Linux-Version installieren, in der wir uns befinden.\nUbuntu: sudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y Fedora: sudo yum update -y Arch Linux: sudo pacman -Syyu Nachdem die Updates installiert sind, beginnen wir mit der Konfiguration des nginx-Dienstes (das ist der Dienst, der es Ihnen ermöglicht, externe HTTP/HTTPS-Verbindungen zu empfangen) auf Ihrem Server (in meinem Fall Ubuntu). Zunächst einmal sollte angemerkt werden, dass es sich aufgrund der Verwirrung bei Apache-, Nginx- und Litespeed-Diensten um unterschiedliche Dienste handelt, die die gleiche Aufgabe erfüllen. Ich habe mich für NGINX entschieden, weil es einfacher zu verwalten ist und mehr Community-Unterstützung bietet.\nLassen Sie uns den privaten Schlüssel generieren Zuerst generieren wir den privaten Schlüssel mit OpenSSL. Der OpenSSL-Befehl, den wir verwenden werden, ist „ecparam“ (EC-Parametermanipulation) und um die Konfigurationsparameter an diesen Befehl zu übergeben:\nopenssl ecparam -genkey -name secp384r1 -out privkey.pem  Die Option -genkey weist OpenSSL an, einen EC-Schlüssel zu generieren. Der Parameter -name teilt OpenSSL mit, welche Kurve verwendet werden soll. Der Parameter -out weist OpenSSL an, die Ausgabe in eine Datei zu schreiben.  Beachten Sie, dass OpenSSL seine Ausgabe standardmäßig im PEM-Format schreibt. Wir können überprüfen, ob OpenSSL das Richtige tut, mit dem Befehl ec, der EC-Schlüssel verarbeitet:\nopenssl ec -in privkey.pem -noout -text  -in ist eine Eingabedatei Das -noout weist OpenSSL an, den Schlüssel nicht zu extrahieren, und gibt sinnlos privkey.pem nach stdout aus. -text weist OpenSSL an, Informationen über den Schlüssel im Klartextformat zu schreiben  Wenn alles gut geht und der Schlüssel korrekt generiert wurde, zeigt OpenSSL etwa Folgendes:\nread EC key Private-Key: (384 bit) priv: [secret] pub: [secret] ASN1 OID: secp384r1 NIST CURVE: P-384 Dadurch wird bestätigt, dass der Schlüssel mit der P-384-Kurve erstellt wurde. Wenn Sie sich fragen, warum wir nicht P-512 statt P-384 verwenden, Let\u0026rsquo;s Encrypt signiert nicht, wenn die Ekliptikkurven höher als 384 Bit sind, und moderne Browser wie Google Chrome markieren Websites, die 512-Bit-Ekliptikkurven verwenden, als ungültig . Das ist die kurze Antwort.\nErstellen wir eine OpenSSL-Konfiguration für das Zertifikat Jetzt müssen wir eine OpenSSL-Konfigurationsdatei erstellen, die die domänenspezifischen Parameter enthält, für die wir das TLS-Zertifikat erhalten möchten. In diesem Beispiel tragen wir die folgende Konfiguration in eine openssl.cnf-Datei ein:\n[ req ] prompt = no encrypt_key = no default_md = sha512 distinguished_name = dname req_extensions = reqext [ dname ] CN = example.com emailAddress = admin@example.com [ reqext ] subjectAltName = DNS:example.com, DNS:www.example.com Hier ist eine kurze Beschreibung dieser Konfigurationsoptionen:\nIm erforderlichen [ req ]-Abschnitt:\n prompt=no weist OpenSSL an, so viel Konfiguration wie möglich aus der Konfigurationsdatei zu holen encrypt_key = no weist OpenSSL an, den privaten Schlüssel nicht mit einem Passwort zu verschlüsseln. (Verschlüsselte private Schlüssel werden von Nginx unterstützt, aber ich verwende sie nicht.) default_md=sha512 weist OpenSSL an, die CSR mit SHA512 zu signieren. (Soweit ich weiß, unterstützt Let\u0026rsquo;s Encrypt nur RSA mit SHA256 für seine Signaturen, aber das bedeutet nicht, dass wir in CSR keine stärkere Verschlüsselung verwenden können.) distinguished_name=dname weist OpenSSL an, nach einem [ dname ]-Abschnitt für Konfigurationsoptionen für Distinguished Name zu suchen. „req_extensions=reqext“ weist OpenSSL an, in den Konfigurationsoptionen nach „Subject Alternative Names“ (SANs)-Erweiterungen, die es konfigurieren möchte, nach einem „[ reqext ]“-Abschnitt zu suchen.  Im Abschnitt Distinguished Name [ dname ]:\n „CN = example.com“ gibt den Common Name des Zertifikats an. Ihre emailAddress = admin@example.com E-Mail-Adresse muss prominent sein. Gewünschte Erweiterungen Im Abschnitt „[ reqext ]“ stellt subjectAltName die Liste der SANs für das Zertifikat bereit. (Chrome ab v58 erfordert, dass der Common Name in der Liste der SANs enthalten ist).  Let\u0026rsquo;s Encrypt v2 unterstützt Platzhalterdomänen, daher können Sie in diesem Beispiel einen einstufigen Platzhalter für Nicht-Apex-Hosts (*.example.com) verwenden.\nLassen Sie uns eine Zertifikatsignieranforderung erstellen Der letzte Schritt auf der Client-Seite besteht darin, die Zertifikatsignieranforderung mit OpenSSL zu generieren, dann leiten wir sie zum Signieren an Let’s Encrypt weiter und rufen das signierte Zertifikat ab.\nDer zum Generieren einer CSR erforderliche OpenSSL-Befehl lautet req .\nopenssl req -new -config openssl.cnf -key privkey.pem -out csr.pem  -new teilt OpenSSL mit, dass wir eine CSR erstellt haben (und wir keine bestehende CSR untersuchen) -config openssl.cnf gibt die Konfigurationsdatei an, die wir oben erstellt haben -key privkey.pem gibt den privaten Schlüssel an, den wir oben erstellt haben -out csr.pem weist OpenSSL an, die CSR in eine Ausgabedatei zu schreiben (anstelle von stdout)  Wir können überprüfen, ob wir die CSR korrekt erstellt haben:\nopenssl req -in csr.pem -noout -text -verify  -verify fordert OpenSSL auf, die Signatur in der CSR zu verifizieren  Dies sollte die folgenden erwarteten Ergebnisse in der Ausgabe erzeugen:\nverify OK Certificate Request: Data: Version: 1 (0x0) Subject: CN = example.com, emailAddress = admin@example.com Subject Public Key Info: Public Key Algorithm: id-ecPublicKey Public-Key: (384 bit) pub: [ommited] ASN1 OID: secp384r1 NIST CURVE: P-384 Attributes: Requested Extensions: X509v3 Subject Alternative Name: DNS:example.com, DNS:www.example.com Signature Algorithm: ecdsa-with-SHA512 [ommited] Bitten Sie Let\u0026rsquo;s Encrypt, unser Zertifikat zu signieren Der letzte Schritt besteht darin, die CSR mit einem ACME-Client zum Signieren an Let\u0026rsquo;s Encrypt zu senden, \u0026ldquo;certbot\u0026rdquo; ist der häufigste Client für diesen Job.\nBefehlszeilenoptionen, die an den „Certbot“-Client übergeben werden, hängen von unserem Setup, der Person, für die unsere Domain registriert ist, usw. ab. Normalerweise müssen wir den Befehl \u0026ldquo;certonly\u0026rdquo; verwenden, und wenn Sie Sternchen (*) verwendet haben, müssen Sie eines der certbot-DNS-Plugins verwenden.\nIst beispielsweise die Domain „example.com“ bei Cloudflare registriert, können wir die Verifizierung über das entsprechende Plugin durchführen, was äußerst komfortabel ist und keinen manuellen Eingriff in den Vorgang erfordert. (Das Konfigurieren des Cloudflare-Plugins mit geheimen Token-Informationen würde den Rahmen dieses Artikels sprengen.)\nEs wird normalerweise empfohlen, zuerst mit --dry-run sicherzustellen, dass alles in Ordnung ist, um sicherzustellen, dass alles in Ordnung ist.\ncertbot nginx certonly --dry-run --domain \u0026#34;example.com\u0026#34; --domain \u0026#34;www.example.com\u0026#34; --csr csr.pem  Anführungszeichen sind um Zeichen herum erforderlich, um fehlerhafte Manipulationen zu vermeiden, und sind im Allgemeinen eine gute Idee. --csr csr.pem teilt certbot mit, dass wir bereits ein Zertifikat haben und Let’s Encrypt benötigen, um es für uns zu signieren.  Der Certbot-Client überprüft auf der Befehlszeile, ob die angeforderte Liste der Domänen mit den im Zertifikat aufgeführten Domänen übereinstimmt, und verwendet das Certbot-NGINX-Plug-in, um zu überprüfen, ob die Domäne unsere ist, und teilt uns mit, falls es Probleme gibt.\nWenn nichts falsch ist, wird es Ihnen sagen:\nWICHTIGE NOTIZEN: - Der Probelauf war erfolgreich. Der eigentliche Befehl lautet wie folgt:\ncertbot nginx certonly --domain \u0026#34;example.com\u0026#34; --domain \u0026#34;www.example.com\u0026#34; --csr csr.pem Nach einer (langen) Verzögerung gibt der Client Folgendes aus:\n Signiertes Zertifikat: 0000_cert.pem Stamm- und Zwischenzertifikate: „0000_chain.pem“. Zertifikat + Zwischenprodukte: 0001_chain.pem An dieser Stelle kann die CSR csr.pem gelöscht werden.  Wenn wir neugierig sind, können wir die vom Client zurückgegebenen Zertifikate mit OpenSSL mit dem Befehl \u0026ldquo;x509\u0026rdquo; überprüfen:\nopenssl x509 -in 0001_chain.pem -noout -text Leider werden wir feststellen, dass Let’s Encrypt wie oben beschrieben unser Zertifikat mit einer SHA256-Signatur signiert. (SHA512 ist nicht nur sicherer, sondern übertrifft SHA256 auf modernen 64-Bit-CPUs.) Aber unser öffentlicher Schlüssel sollte immer noch ECDSA verwenden.\nDiese Dateien sind nicht gewöhnlich, daher müssen wir sie auf informativere Weise verschieben und bearbeiten.\nUnter Debian Linux erstelle ich gerne Unterverzeichnisse für meine Domains, indem ich meinen privaten Schlüssel in /home/USER_NAME/SSL/private/example.com/privkey.pem und Zertifikate behalte:\n /home/USER_NAME/SSL/certs/example.com/cert.pem /home/USER_NAME/SSL/certs/example.com/chain.pem /home/USER_NAME/SSL/certs/example.com/fullchain.pem  ENDE Wenn wir alles richtig gemacht haben, bestätigt die Überprüfung des Zertifikats mit einem Webbrowser wie Chrome, dass es sich um ein EC-Zertifikat handelt:\nMozilla Observatory wird uns auch eine A+ Bewertung geben!\nDarüber hinaus können wir als Ergebnis des SSL Labs-Berichts sehen, dass ein 384-Bit-ECC-Zertifikat verwendet wurde.\nHINWEIS: Dieser Artikel profitiert vom Artikel von Benjamin Black zum gleichen Thema.\n","permalink":"https://wiseweb.works/de/post/ecc-ssl-sertifikas%C4%B1/","summary":"Einführung und Zusammenfassung Heute lernen wir, wie man SSL-Zertifikate generiert, um sicherzustellen, dass der Datenverkehr zwischen einer von Ihnen verwalteten Website oder einem Anwendungsserver und Ihren Besuchern vertraulich / zuverlässig und überprüfbar ist. In meinen vorherigen Artikeln habe ich erklärt, wie und mit welcher Konfiguration Sie das von Ihnen erstellte Zertifikat bereitstellen würden. In diesem Artikel zeige ich Ihnen, wie Sie die Gleichung „weniger Brot, mehr Frikadellen“ aufstellen, also ein schnelleres und sichereres SSL-Zertifikat erstellen.","title":"Generieren eines ECC-SSL-Zertifikats auf einem Linux-Server"},{"content":"Erhöhung der SSL-Sicherheit auf Linux-Servern Wenn Sie heute eine Website und/oder App auf Ihrem aktuellen Server betreiben, werde ich über die benötigte SSL-Verbindung und die damit verbundene openssl-Bibliothek sprechen. SSL (Secure Socket Layer) und TLS (Transport Layer Security) sind eine Form der Verbindung, die es Personen, die sich mit Ihrem Server verbinden möchten, ermöglicht, sicher mit Ihrer Website zu kommunizieren. In der Vergangenheit gab es Versionen von SSL v1 bis v3, und während Websites im Allgemeinen diese SSL-Versionen verwenden, wurde SSL jetzt von den Websites aufgegeben und durch das sicherere TLS ersetzt. Wir müssen jedoch weiterhin das Wort \u0026ldquo;ssl\u0026rdquo; im erläuternden Teil und beim Bearbeiten der Konfigurationsdateien verwenden. Um Ihnen das mit ein wenig Humor zu sagen, haben Sie jemals darüber nachgedacht, warum, wenn Sie die 64-Bit-Version einer Anwendung herunterladen möchten, warum sie \u0026ldquo;amd_64\u0026rdquo; heißt? Da AMD als erster auf 64 Bit umgestiegen ist, blieb diese Namensgebung als Zeichen des Respekts und/oder der Gewohnheit bei amd_64. Auch wenn wir derzeit TLS verwenden, bleiben die Benennungs- und Konfigurationsparameter „SSL“.\nWie in unserem vorherigen Artikel werde ich den Prozess noch einmal unter drei verschiedenen Überschriften als einfach, empfohlen und fortgeschritten erklären. Titelinhalte werden sukzessive nach persönlichen Anforderungen berücksichtigt. Obwohl die Titel miteinander verknüpft sind, ist es kein Problem, sie in einem gewünschten Stadium zu belassen.\nEinfache Konfiguration Zuerst müssen wir die Updates über die Konsole mit dem Paketmanager der Linux-Version installieren, in der wir uns befinden.\nUbuntu: sudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y Fedora: sudo yum update -y Arch Linux: sudo pacman -Syyu Nachdem die Updates installiert sind, beginnen wir mit der Konfiguration des nginx/Apache-Dienstes (das ist der Dienst, der es Ihnen ermöglicht, externe Webverbindungen zu empfangen) auf Ihrem Server (in meinem Fall Ubuntu). Die Datei, in der die Nginx-Diensteinstellungen gespeichert sind, befindet sich im Allgemeinen unter „/etc/nginx/nginx.conf“. Wir müssen es mit einem der von uns verwendeten Texteditoren öffnen, jedoch mit einem Benutzer mit sudo-Rechten (dh Administratorrechten).\nWenn wir mit Ubuntu fortfahren (Single IP for Single Server Configuration)\nsudo nano /etc/nginx/nginx.config # Befehl zum Öffnen der Einstellungsdatei Zu ergänzende Titel (gegebenenfalls geändert) hören 443 ssl http2; \u0026gt;\u0026gt; Es dient dazu, die Anfragen zu erfüllen, die über IPv4 mit dem http2-Protokoll an Port 443 kommen, und eine SSL-Verbindung aufzubauen. hören [::]:443 ssl http2; \u0026gt;\u0026gt; Es dient dazu, die an Port 443 eingehenden Anfragen über IPv6 mit http2-Protokoll zu erfüllen und eine SSL-Verbindung herzustellen. (Wenn Sie keine IPv6-Unterstützung haben oder sie nicht nativ unterstützen möchten, können Sie sie entfernen.) server_name IHR SERVER_NAME; \u0026gt;\u0026gt; Wenn Sie Ihren Servernamen nicht als Standard festlegen möchten, können Sie einen Servernamensindikator angeben. Dies dient nur dazu, die an Ihren Servernamen eingehenden Anforderungen zu erfüllen, anstatt alle eingehenden Anforderungen zu erfüllen. ssl_certificate /etc/letsencrypt/live/YOURSERVER_NAME/fullchain.pem; \u0026gt;\u0026gt; Wenn Sie Let\u0026#39;s Encrypt für kostenloses SSL verwenden, ist dies der Standardspeicherort für das Zertifikat. Andernfalls ersetzen Sie es durch Ihre eigene Zertifikatsdatei. ssl_certificate_key /etc/letsencrypt/live/YOURSERVER_NAME/privkey.pem; \u0026gt;\u0026gt; Wenn Sie Let\u0026#39;s Encrypt für kostenloses SSL verwenden, ist dies der Standardspeicherort für private Schlüssel. Ersetzen Sie es andernfalls durch Ihren eigenen Speicherort der privaten Schlüsseldatei. ssl_protocols TLSv1.3 TLSv1.2; \u0026gt;\u0026gt; Erforderlicher Befehl, um nur die neuesten und zuverlässigsten TLS-Protokolle zu akzeptieren. ssl_prefer_server_ciphers on; \u0026gt;\u0026gt; Während des Gesprächs zwischen dem Server und dem Client, schätze ich, dass sie über \u0026#34;ok, mal sehen, was wir haben\u0026#34; gesprochen haben. Kurz gesagt, wenn es für Sie funktioniert, wenn es für Sie nicht funktioniert, rede ich nicht. ssl_ecdh_curve secp521r1:secp384r1; \u0026gt;\u0026gt; Es ist der Befehl, der uns sagt, welche Kurven wir bevorzugen, wenn wir Ekliptikkurven verwenden müssen. ssl_chiffren DH-RSA-AES256-SHA:DH-RSA-AES256-SHA256:DHE-RSA-AES256-GCM-SHA384:DH-RSA-AES256-GCM-SHA384:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_PODSADHESA:25_SHA256 -ECDSA-AES256 -RSA-AES256-SHA:AECDH-AES256-SHA:ECDHE-ECDSA-AES256-SHA384:ECDH-ECDSA-AES256-SHA384:ECDH-RSA-AES256-SHA384:ECDHE-ECDSA-AES256 -GCM-SHA384:ECDH-ECDSA -AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDH-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-CCM:DHE-RSA-AES256-CCM8 :ECDHE-ECDSA-AES256-CCM :ECDHE-ECDSA-AES256-CCM8:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-CHACHA20-POLY1305:DHE-RSA-CHACHA20-POLY1305; \u0026gt;\u0026gt; Der Code, der den Server anweist, nur die SSL-Algorithmen zu verwenden, die ich am zuverlässigsten finde. Alle Chiffren für diejenigen, die einzeln recherchieren wollen: \u0026ldquo;https://testssl.sh/openssl-iana.mapping.html\u0026quot;\nWenn Sie nach dem Vornehmen der Einstellungen überprüfen möchten: Sie können den Befehl „sudo nginx -t“ verwenden. Wenn Sie keine Fehlermeldung sehen, können Sie die Einstellungen übernehmen und den Dienst mit dem Befehl \u0026ldquo;sudo systemctl restart nginx\u0026rdquo; oder \u0026ldquo;sudo service nginx restart\u0026rdquo; neu starten.\nEmpfohlene Einstellungen Zusätzlich zu den vorherigen Einstellungen werden wir einige Leistungsverbesserungen sowie einige zusätzliche Konfigurationen vornehmen, die es Ihrer Website ermöglichen, auf SSL-Testseiten einen höheren Rang einzunehmen. Danach werden wir einige Verbesserungen vornehmen, um sicherzustellen, dass einige Header und Ressourcen Ihrer Website nicht von Websites Dritter ausgenutzt werden, was für den Benutzerzugriff Ihrer Website von Vorteil ist.\nZu ergänzende Titel (gegebenenfalls geändert) ssl_session_cache freigegeben:TLS:2m; \u0026gt;\u0026gt; Code, der angibt, wie TLS-Verbindungen auf Worker (nginx-Worker) verteilt werden und wie lange die Verbindungen geteilt werden ssl_buffer_size 4k; \u0026gt;\u0026gt; Der Code, der angibt, in wie viele Container die Pakete aufgeteilt werden, wenn auf SSL-Anfragen geantwortet und Pakete nach dem Handshake gesendet werden. Ein niedrigerer Wert bedeutet, dass mehr Pakete gesendet werden, aber weniger Overhead. ssl_stapling an; \u0026gt;\u0026gt; Aktiviert die OCSP-Heftfunktion ssl_stapling_verify an; Aktiviert die Möglichkeit, das OCSP-Heften zu überprüfen, einschließlich auf übergeordneten und Stammservern. Resolver 1.1.1.1 1.0.0.1 2606:4700:4700::1111 2606:4700:4700::1001; \u0026gt;\u0026gt; Aktiviert die OCSP-Stapling-Überprüfung mit Cloudlfare. Wenn Sie IPv6 nicht verwenden oder es nicht nativ unterstützen möchten, können Sie die IPv6-Adressen löschen. add_header X-Content-Type-Options \u0026#34;nosniff\u0026#34; immer; \u0026gt;\u0026gt; Es ist der Header-Wert, der Browser daran hindert, MIME-Inhalte zu verstehen. add_header X-Xss-Protection \u0026#34;1; mode=block\u0026#34; immer; \u0026gt;\u0026gt; Es handelt sich um einen Titel, der die Schwachstelle bis zu einem gewissen Grad verhindert, indem er Benutzern ermöglicht, einen weißen Bildschirm in einer möglichen XSS-Schwachstelle zu sehen. add_header X-Frame-Optionen \u0026#34;SAMEORIGIN\u0026#34; immer; \u0026gt;\u0026gt; Es verhindert in irgendeiner Weise, dass eine Seite Ihres Servers auf einer anderen Seite angezeigt und/oder nacheinander mit einem i-Frame-Code usw. veröffentlicht wird. Nur Sie können ein Fenster von Ihrer eigenen Site innerhalb Ihrer eigenen Site veröffentlichen. add_header Referrer-Policy \u0026#34;no-referrer-when-downgrade\u0026#34; immer; \u0026gt;\u0026gt; Wenn Sie auf eine Website mit geringeren Sicherheitsmaßnahmen umleiten oder verlinken, wird nicht automatisch ein Referrer-Header hinzugefügt und es ist nicht klar, dass der Datenverkehr von Ihrer Website kommt. add_header Content-Security-Policy \u0026#34;default-src \u0026#39;self\u0026#39; https: data: \u0026#39;unsafe-inline\u0026#39; \u0026#39;unsafe-eval\u0026#39;;\u0026#34; immer; \u0026gt;\u0026gt; Der Titel, der die Bedingungen regelt, unter denen Anfragen, die Sie und andere Benutzer von außen anrufen können, aufgerufen werden können. Standardmäßig vertraue ich einigen Quellen, die über https kommen. add_header Berechtigungsrichtlinie \u0026#34;Kamera=(), Vollbild=(self), Geolocation=(), Mikrofon=(), Zahlung=()\u0026#34; immer; \u0026gt;\u0026gt; Es verhindert das Sammeln von Informationen auf Ihrer Website mit verschiedenen Arten von Vergiftung (Cache-Vergiftung oder js-Vergiftung), indem es angibt, welche Berechtigungen Sie für den Browser wünschen oder welche Sie überhaupt nicht benötigen. Wenn Sie nach dem Vornehmen der Einstellungen überprüfen möchten: Sie können den Befehl „sudo nginx -t“ verwenden. Wenn Sie keine Fehlermeldung sehen, können Sie die Einstellungen übernehmen und den Dienst mit dem Befehl „sudo systemctl restart nginx“ oder „sudo service nginx restart“ neu starten.\nErweiterte Einstellungen Zunächst fügen wir Ihrer Website einen Header hinzu, um anzuzeigen, dass sie nur über SSL verbunden werden soll. Auf diese Weise können diejenigen, die Ihre Website zuvor aufgerufen haben, und diejenigen, die diesen Titel bereits in ihrem Browser haben, nicht ohne SSL auf Ihre Website zugreifen, selbst wenn sie dies wünschen. Dann werden wir die SSL-Zertifikate heften, die in HTTP-Sitzungen verwendet werden sollen, und wir werden im Voraus angeben, welche Zertifikate neben der vorherigen Methode verbunden werden müssen. Selbst wenn Sie ein autorisierter Top-Zertifikatsmanager oder Root-Manager sind, können diese auf diese Weise keine Verbindung zu Ihrer Site mit dem in Ihrem Namen signierten Zertifikat herstellen. E-Tugra-Stammzertifikatanbieter mit Wohnsitz in der Türkei zu diesem Zeitpunkt unterzeichnete ein Zertifikat für *.google.com. Wenn Sie ein wenig recherchieren, werden Sie herausfinden, wann es passiert ist und warum (wie schlimm es sein könnte). Beginnen wir nun mit dem letzten Konfigurationsteil.\nStellen Sie zunächst sicher, dass Ihre Website problemlos über SSL aufgerufen werden kann. Fügen Sie dann gemäß Ihrer Anfrage einen der folgenden Header zur nginx-Konfigurationsdatei hinzu. Aber Achtung, nur einer.\nadd_header Strict-Transport-Security \u0026#34;max-age=2592000;\u0026#34; immer; \u0026gt;\u0026gt; Header, der besagt, dass auf Ihre Website 30 Tage lang nur über HTTPS zugegriffen werden kann. (ohne Subdomains) add_header Strict-Transport-Security \u0026#34;max-age=2592000; includeSubDomains;\u0026#34; immer; \u0026gt;\u0026gt; Header, der besagt, dass Ihre Website 30 Tage lang nur über HTTPS aufgerufen werden kann, einschließlich Subdomains. add_header Strict-Transport-Security \u0026#34;max-age=31536000; includeSubDomains;\u0026#34; immer; \u0026gt;\u0026gt; Header, der besagt, dass auf Ihre Website 1 Jahr lang nur über HTTPS zugegriffen werden kann, einschließlich Subdomains. add_header Strict-Transport-Security \u0026#34;max-age=31536000; includeSubDomains; preload\u0026#34; immer; \u0026gt;\u0026gt; Der Header, der angibt, dass auf Ihre Website 1 Jahr lang nur über HTTPS zugegriffen werden kann, einschließlich Subdomains, und dass dieser Header von Browsern zwischengespeichert wird. Darüber hinaus werden neue Browser diesen Titel erkennen, auch wenn sie Ihre Website noch nie zuvor besucht haben. add_header Strict-Transport-Security \u0026#34;max-age=0; includeSubDomains\u0026#34;; \u0026gt;\u0026gt; Titel für das vollständige Entfernen der HSTS-Funktion und der Mitgliedschaft in der Preload-Liste. Nachdem Sie den oben erwähnten Header hinzugefügt haben, ist es jetzt an der Zeit, den Hash des verwendeten SSL-Zertifikats an die HTTP-Sitzung anzuheften. In diesem Stadium müssen wir einen Hash Ihres aktuellen Zertifikats extrahieren, das Zertifikat der obersten Unterzeichnungsstelle hashen und diesen Hash-Prozess fortsetzen, bis wir die gesamte Kette einschließlich der obersten Stammzertifizierungsstelle abgeschlossen haben. Aus diesem Grund führen wir die folgenden Befehle jeweils mit einem Root-Benutzer oder einem Benutzer mit sudo-Berechtigung aus. (Der Vortrag wurde speziell für Let\u0026rsquo;s Encrypt gemacht.)\n1] cat /etc/letsencrypt/live/IHR SERVERNAME/cert.pem | openssl x509 -pubkey | openssl pkey -pubin -outform der | openssl dgst -sha256 -binär | base64 \u0026gt;\u0026gt; Dieser Befehl extrahiert den Hash des Zertifikats Ihrer Website. Kopieren Sie den Ergebniswert irgendwo hin. 2] curl -s https://letsencrypt.org/certs/lets-encrypt-x4-cross-signed.pem | openssl x509 -pubkey | openssl pkey -pubin -outform der | openssl dgst -sha256 -binär | base64 \u0026gt;\u0026gt; Dieser Befehl extrahiert eines der mehrfach signierten Zertifikate von letsencrypt. 3] curl -s https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem | openssl x509 -pubkey | openssl pkey -pubin -outform der | openssl dgst -sha256 -binär | base64 \u0026gt;\u0026gt; Dieser Befehl extrahiert eines der mehrfach signierten Zertifikate von letsencrypt. 4] curl -s https://letsencrypt.org/certs/isrgrootx1.pem | openssl x509 -pubkey | openssl pkey -pubin -outform der | openssl dgst -sha256 -binär | base64 \u0026gt;\u0026gt; Dieser Befehl extrahiert das Stammzertifikat (oberstes Zertifikat) von letsencrypt. Der folgende Wert wird der Nginx-Konfigurationsdatei hinzugefügt 5] add_header Public-Key-Pins \u0026#39;pin-sha256=\u0026#34;ERSTE_ERGEBNIS\u0026#34;; Pin-sha256 = \u0026#34;ZWEITES_ERGEBNIS\u0026#34;; pin-sha256=\u0026#34;TIP_END\u0026#34;; pin-sha256=\u0026#34;FINISH_RESULT\u0026#34;; Maximalalter = 2592000; includeSubDomains\u0026#39; immer; \u0026gt;\u0026gt; Sie können sich nur mit dem angegebenen Zertifikat 30 Tage lang mit Ihrer Website verbinden. Sie können den max-age-Wert optional erhöhen. Bevor die Gültigkeitsdauer Ihres Zertifikats weniger als 30 Tage beträgt, müssen Sie die Kopfzeile deaktivieren oder ein neues Zertifikat anfordern und es als fünften Wert hinzufügen. Als Bonus möchte ich Ihnen einen weiteren Befehl zeigen, dessen Ausführung lange dauert, aber sehr nützlich ist. 6] openssl dhparam -out /etc/nginx/dhparams.pem 4096 \u0026gt;\u0026gt; Die Ausführung dieses Befehls kann zwischen 15 Minuten und 1 Stunde dauern. Nachdem der Vorgang abgeschlossen ist, müssen Sie den folgenden Befehl zur nginx-Konfigurationsdatei hinzufügen. ssl_dhparam /etc/nginx/dhparam.pem; \u0026gt;\u0026gt; Der Befehl zum Ändern der während des Diffie-Hellman-Schlüsselaustauschalgorithmus zu verwendenden Werte mit den gerade erstellten geheimen Werten, abgesehen von den Standardwerten. Nachdem Sie die Einstellungen vorgenommen haben, übernehmen Sie die Einstellungen mit dem Befehl „sudo nginx -t“ und dann, wenn Sie keine Fehlermeldung sehen, „sudo service nginx restart“ und starten Sie den Dienst neu. Nun wird die Verbindung mit der von Ihnen festgelegten Konfiguration und Bedingungen bereitgestellt. Wenn Sie den Vorher/Nachher-Bewertungsunterschied sehen möchten, können Sie sich die Bilder unten ansehen oder Ihre eigene Website unter „https://www.ssllabs.com/ssltest/index.html“ testen.\nVOR NACH Wenn Sie fragen, warum die Cipher-Stärke nicht 100 % beträgt, ist es derzeit nicht möglich, 100 % zu erreichen, da „TLS_AES_128_GCM_SHA256 (0x1301)“ automatisch mit TLS 1.3 geliefert wird und hinzugefügt wird, auch wenn wir es nicht möchten. Wenn Sie denken, dass ich TLS 1.3 abschalte, dann wird es nicht kommen, dann sind Ihre Punkte leider woanders weg.\nEnde Dieser Artikel wurde zuvor unter https://teknolojirehberleri.xyz veröffentlicht. Um ein persönliches Portfolio zu erstellen, hatte ich das Bedürfnis, es auf meiner persönlichen Website erneut zu veröffentlichen.\n","permalink":"https://wiseweb.works/de/post/ssl-konfigurasyonu/","summary":"Erhöhung der SSL-Sicherheit auf Linux-Servern Wenn Sie heute eine Website und/oder App auf Ihrem aktuellen Server betreiben, werde ich über die benötigte SSL-Verbindung und die damit verbundene openssl-Bibliothek sprechen. SSL (Secure Socket Layer) und TLS (Transport Layer Security) sind eine Form der Verbindung, die es Personen, die sich mit Ihrem Server verbinden möchten, ermöglicht, sicher mit Ihrer Website zu kommunizieren. In der Vergangenheit gab es Versionen von SSL v1 bis v3, und während Websites im Allgemeinen diese SSL-Versionen verwenden, wurde SSL jetzt von den Websites aufgegeben und durch das sicherere TLS ersetzt.","title":"Erhöhung der SSL-Sicherheit auf Linux-Servern"},{"content":"Erhöhung der SSH-Sicherheit auf Linux-Servern Heute werde ich darüber sprechen, wie wir den SSH-Dienst, der es uns ermöglicht, eine sichere Verbindung herzustellen, wenn Sie einen Server mieten, sicherer und fern von böswilligen Anfragen von außen halten können. In erster Linie werde ich den Prozess unter drei verschiedenen Überschriften beschreiben: einfach, empfohlen und fortgeschritten. Titelinhalte werden sukzessive nach persönlichen Anforderungen berücksichtigt. Obwohl die Titel miteinander verknüpft sind, ist es kein Problem, sie in einem gewünschten Stadium zu belassen.\nEinfache Sicherheitsvorkehrungen Zuerst müssen wir die Updates über die Konsole mit dem Paketmanager der Linux-Version installieren, in der wir uns befinden.\nUbuntu: sudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y Fedora: sudo yum update -y Arch-Linux: sudo pacman -Syyu Nachdem die Updates installiert sind, beginnen wir mit der Konfiguration des SSHD-Dienstes (das ist der Dienst, der es Ihnen ermöglicht, SSH-Verbindungen von außen zu empfangen) auf Ihrem Server (in meinem Fall Ubuntu). Vor allem sei aufgrund der Verwirrung angemerkt, dass es sich bei dem ssh-Dienst und dem SSHD-Dienst um unterschiedliche Dienste handelt. Während der SSH-Dienst der Dienst ist, der den Server mit anderen Computern oder Servern verbindet, ist der SSHD-Dienst der Dienst, der es anderen Computern ermöglicht, sich mit Ihrem Server zu verbinden, d. h. eingehende Verbindungen.\nDie Datei, die die Einstellungen des SSHD-Dienstes enthält, befindet sich im Allgemeinen unter „/etc/ssh/sshd_config“. Wir müssen es mit einem der von uns verwendeten Texteditoren öffnen, jedoch mit einem Benutzer mit sudo-Rechten (dh Administratorrechten).\nWenn wir weitermachen, Ubuntu\nsudo nano /etc/ssh/sshd_config # Befehl zum Öffnen der Einstellungsdatei Titel werden wir finden und ersetzen\n#ClientAliveInterval 0 \u0026gt;\u0026gt; Wir entfernen den Hashtag am Anfang und ändern den Wert von „0“ auf 300. Dieser Befehl regelt das automatische Schließen der Verbindung nach wie vielen Sekunden, wenn die Verbindung nicht genutzt wird (sie bleibt im Ruhezustand) . #PermitEmptyPasswords nein \u0026gt;\u0026gt; Wir entfernen das Hashtag am Anfang und ändern den \u0026#34;nein\u0026#34;-Wert nicht. Dieser Befehl verhindert, dass leere oder unverschlüsselte Benutzer eine Verbindung herstellen. Es erlaubt also keine leeren Passwörter. X11Forwarding yes \u0026gt;\u0026gt; Wenn am Anfang ein Hashtag steht, entfernen wir es, andernfalls ändern wir den „yes“-Wert auf no. Obwohl dieser Befehl das Ausführen von Anwendungen mit GUI-Schnittstelle auf dem Server erleichtert, schließen wir ihn, da er missbraucht werden kann. #MaxAuthTries 6 \u0026gt;\u0026gt; Wir entfernen den Hashtag am Anfang und ändern den Wert von „6“ auf 3. Dieser Befehl regelt, wie oft sie Ihr Passwort versuchen dürfen. Die Zahl 6 ist ein unnötig hoher Wert und die allgemeine Akzeptanz liegt bei 3 oder 4. #Protokol 2 \u0026gt;\u0026gt; Wenn am Anfang ein Hashtag steht, entfernen wir es, wenn es keinen solchen Eintrag gibt, fügen wir den Wert in Form von „Protokol 2“ an das erste Leerzeichen an, das wir finden. Dieser Befehl stellt sicher, dass Verbindungen nur mit dem neuesten SSH-Protokoll hergestellt werden, und schützt Sie so vor Schwachstellen des alten Protokolls. Wenn Sie nach dem Vornehmen der Einstellungen überprüfen möchten: Sie können den Befehl „sudo sshd -t“ verwenden. Wenn Sie keine Fehlermeldung sehen, können Sie die Einstellungen übernehmen und den Dienst mit dem Befehl \u0026ldquo;sudo systemctl restart sshd\u0026rdquo; oder \u0026ldquo;sudo service sshd restart\u0026rdquo; neu starten.\nEmpfohlene Einstellungen Zusätzlich zu den vorherigen Einstellungen werden wir zusätzliche Einstellungen vornehmen, wie z. B. benutzerbasierte Anmeldung, Anmeldung nur mit sicherem Schlüssel und Einschränkung der Anmeldung mit Root-Benutzer. Zuerst müssen Sie einen geheimen Schlüssel für Ihren Benutzer auf Ihrem lokalen Computer generieren. Dazu, wenn Sie ein Linux-basiertes Betriebssystem verwenden\nNachdem Sie ssh-keygen -t rsa -b 4096 # eingegeben haben, geben Sie das gewünschte Passwort als Antwort auf die folgenden Fragen ein \u0026gt;\u0026gt;\u0026gt;\u0026gt; Passphrase eingeben (leer für keine Passphrase): [Entertaste drücken] \u0026gt;\u0026gt;\u0026gt;\u0026gt; Gleiche Passphrase erneut eingeben: [Entertaste drücken] oder ssh-keygen -t ecdsa -b 521 # Erzeugt einen sichereren und schnelleren Ekliptikschlüssel. Geben Sie das gewünschte Passwort als Antwort auf die folgenden Fragen ein \u0026gt;\u0026gt;\u0026gt;\u0026gt; Passphrase eingeben (leer für keine Passphrase): [Entertaste drücken] \u0026gt;\u0026gt;\u0026gt;\u0026gt; Gleiche Passphrase erneut eingeben: [Entertaste drücken] Wenn Sie andere Fragen mit der Eingabetaste beantwortet und keinen bestimmten Speicherort für den Schlüssel eingegeben haben, wird Ihr Schlüsselpaar (.pub=öffentlicher Schlüssel) / privater Schlüssel ohne Erweiterung) im Ordner /home/USER_NAME/.ssh gespeichert. Sie können den folgenden Code verwenden, um den von Ihnen generierten Schlüssel auf Ihrem Server einzuführen.\nssh-copy-id -i ~/.ssh/KEY_NAME.pub Nachdem Sie USER_NAME@SERVER_IP_ADRESS # auf dem SERVER eingegeben haben, werden Sie nach dem Passwort Ihres Benutzers gefragt und wenn Sie es richtig eingeben, sehen Sie eine Bestätigungsnachricht. Nachdem Sie Ihren eigenen Schlüssel generiert haben, greifen Sie nur mit dem Schlüssel auf den Server zu; Titel werden wir finden und ersetzen\n#PasswordAuthentication no \u0026gt;\u0026gt; Wir entfernen den Hashtag am Anfang und belassen den „no“-Wert auf no. Dieser Befehl verhindert, dass eine Verbindung zum Server mit einem Kennwort hergestellt wird. Benutzer können sich nur mit ssh_keys verbinden. PubkeyAuthentication yes \u0026gt;\u0026gt; Falls ja, entfernen wir das Rautezeichen am Anfang und setzen den Wert auf yes. Dieser Befehl ist der Befehl, mit dem Sie sich mit dem gerade erstellten geheimen Schlüssel anmelden können. #PermitRootLogin no \u0026gt;\u0026gt; Wir entfernen den Hashtag am Anfang und belassen den „no“-Wert auf no. Dieser Befehl verhindert, dass der ROOT-Benutzer, der am stärksten autorisierte Benutzer ist, auf den Server zugreift. Sie können jedoch mit einem anderen Benutzer darauf zugreifen und dann zum ROOT-Benutzer wechseln. AllowUsers IHR BENUTZERNAME \u0026gt;\u0026gt; Falls noch nicht vorhanden, fügen wir einen solchen Eintrag hinzu. Es hindert andere Benutzer daran, sich mit dem Server zu verbinden und/oder einen Benutzernamen zu versuchen. LoginGraceTime 20 \u0026gt;\u0026gt; Wenn nicht, fügen wir einen solchen Datensatz hinzu und setzen den Wert auf 20. Bestimmt die für die Anmeldung erforderliche Zeit in Sekunden. Wir verhindern, dass sie den Server mit einer langen Anmeldeanfrage beschäftigen. ChallengeResponseAuthentication no \u0026gt;\u0026gt; Falls ja, entfernen wir das Rautezeichen am Anfang und setzen den Wert auf no. Dieser Befehl deaktiviert andere Anmeldemethoden. KerberosAuthentication no \u0026gt;\u0026gt; Falls ja, entfernen wir das Rautezeichen am Anfang und setzen den Wert auf no. Dieser Befehl deaktiviert andere Anmeldemethoden. GSSAPIAuthentication no \u0026gt;\u0026gt; Falls ja, entfernen wir das Rautezeichen am Anfang und setzen den Wert auf no. Dieser Befehl deaktiviert andere Anmeldemethoden. Wenn Sie nach dem Vornehmen der Einstellungen überprüfen möchten: Sie können den Befehl „sudo sshd -t“ verwenden. Wenn Sie keine Fehlermeldung sehen, können Sie die Einstellungen übernehmen und den Dienst mit dem Befehl \u0026ldquo;sudo systemctl restart sshd\u0026rdquo; oder \u0026ldquo;sudo service sshd restart\u0026rdquo; neu starten.\nErweiterte Einstellungen Zunächst werden wir den Standard-SSH-Verbindungsport 22 ändern und dann die während der SSH-Verbindung verwendeten Verschlüsselungstools noch stärker machen. Anschließend legen wir fest, wie die Protokolle (Registrierungsdatensätze) des Server-SSH-Dienstes geführt werden.\nTitel werden wir finden und ersetzen\n#Port 22 \u0026gt;\u0026gt; Wir finden das und entfernen das Rautezeichen am Anfang und schreiben dort eine Portnummer, die von keinem anderen Dienst verwendet wird und offen ist. Zum Beispiel könnte es 2992 sein. LogLevel INFO \u0026gt;\u0026gt; Wir finden diese Einstellung und ändern sie, wenn nicht, fügen wir sie hinzu. Es hilft uns, den Aufnahmepegel einzustellen. AllowAgentForwarding no \u0026gt;\u0026gt; Wir finden diese Einstellung und ändern sie, wenn nicht, fügen wir sie hinzu. Deaktiviert alternative Routing-Methoden. AllowTcpForwarding no \u0026gt;\u0026gt; Wir finden diese Einstellung und ändern sie, wenn nicht, fügen wir sie hinzu. Deaktiviert alternative Routing-Methoden. PrintMotd nein \u0026gt;\u0026gt; Wir finden diese Einstellung und ändern sie, wenn nicht, fügen wir sie hinzu. Um zu verhindern, dass sie etwas über den Server erfahren, bevor die Verbindung hergestellt wird. PermitUserEnvironment nein \u0026gt;\u0026gt; Wir finden diese Einstellung und ändern sie, wenn nicht, fügen wir sie hinzu. PermitTunnel no \u0026gt;\u0026gt; Wir finden diese Einstellung und ändern sie, wenn nicht, fügen wir sie hinzu. Wir gehen noch weiter und bestimmen, welcher der Verschlüsselungsalgorithmen, Authentifizierungsalgorithmen, Schlüsselaustauschalgorithmen und anderen Algorithmen, die während der SSH-Verbindung verwendet werden, der Standard sein sollte.\nWir führen die folgenden Befehle jeweils mit einem Root-Benutzer oder einem Benutzer mit sudo-Berechtigung aus.\n1] rm /etc/ssh/ssh_host_* 2] ssh-keygen -t rsa -b 4096 -f /etc/ssh/ssh_host_rsa_key -N \u0026#34;\u0026#34; 3] ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -N \u0026#34;\u0026#34; 4] awk \u0026#39;$5 \u0026gt;= 3072\u0026#39; /etc/ssh/moduli \u0026gt; /etc/ssh/moduli.tmp 5] mv /etc/ssh/moduli.tmp /etc/ssh/moduli 6] sed -i \u0026#39;s/^\\#HostKey \\/etc\\/ssh\\/ssh_host_\\(rsa\\|ed25519\\)_key$/HostKey \\/etc\\/ssh\\/ssh_host_\\1_key/g\u0026#39; /etc/ ssh/sshd_config 7] echo -e \u0026#34;KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\\nCiphers chacha20-poly1305@ openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512 -etm@openssh.com,umac-128-etm@openssh.com\\nHostKeyAlgorithms ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,sk-ssh-ed25519- cert-v01@openssh.com,rsa-sha2-256,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com\u0026#34; \u0026gt; / etc/ssh/sshd_config.d/ssh-hardening.conf Nachdem Sie die Einstellungen vorgenommen haben, übernehmen Sie die Einstellungen mit dem Befehl „sudo sshd -t“ und dann, wenn Sie keine Fehlermeldung sehen, „sudo service sshd restart“ und starten Sie den Dienst neu. Jetzt können Sie sich über den gerade definierten Port und nur mit Ihrem privaten Schlüssel mit dem Server verbinden. Verbinden;\nSie können den Befehl ssh -i ~/.ssh/KEY_NAME USER_NAME@SERVER_IP_ADRESS -p PORT_NUMBER # verwenden. Sie können fortfahren, indem Sie bei den eingehenden Benachrichtigungen die Eingabetaste sagen. Ende Dieser Artikel wurde zuvor unter https://teknolojirehberleri.xyz veröffentlicht. Um ein persönliches Portfolio zu erstellen, hatte ich das Bedürfnis, es auf meiner persönlichen Website erneut zu veröffentlichen.\n","permalink":"https://wiseweb.works/de/post/ssh-guvenligi/","summary":"Erhöhung der SSH-Sicherheit auf Linux-Servern Heute werde ich darüber sprechen, wie wir den SSH-Dienst, der es uns ermöglicht, eine sichere Verbindung herzustellen, wenn Sie einen Server mieten, sicherer und fern von böswilligen Anfragen von außen halten können. In erster Linie werde ich den Prozess unter drei verschiedenen Überschriften beschreiben: einfach, empfohlen und fortgeschritten. Titelinhalte werden sukzessive nach persönlichen Anforderungen berücksichtigt. Obwohl die Titel miteinander verknüpft sind, ist es kein Problem, sie in einem gewünschten Stadium zu belassen.","title":"Erhöhung der SSH-Sicherheit auf Linux-Servern"}]