[{"content":"Introduction and Summary Today we will learn how to generate SSL certificates to ensure that the traffic between a website or application server you manage and your visitors is confidential / reliable and verifiable. In my previous articles, I explained how and with what configuration you would deploy the certificate you produced. In this article, I will show you how to set up the equation of less bread, more meatballs, that is, how to produce a faster and more secure SSL certificate. Normally, if you are familiar with Let\u0026rsquo;s Encrypt\u0026rsquo;s ACME protocol (as of the date of writing), it is possible to generate a 1024-4098 (if you try too hard, maybe 8196) bit certificate with RSA asymmetric key structure and use it for 90 days relatively. However, generating such a large key, using it during TLS handshake after generating it, and being compatible with the devices used by the visitors causes problems in most scenarios. For example, when 4096 bits are used instead of 2048 bits, I am faced with 0.4-0.8 seconds longer handshake times in some of my attempts. As if it\u0026rsquo;s okay for the handshake to take that long, it puts an extra load on the server. But when you generate a 384-bit ECC certificate instead of 4096-bit RSA, you get a much faster certificate and at the same time security equal to 7680-bit RSA (if it were that size).\nWell, you explained it well, but where is the point of this work, I seem to hear you say. I will upset you, but there is no point in this business. The reason why it doesn\u0026rsquo;t is hidden in the background math. Briefly, I will talk about the minor differences in the production and use of both certificates, explain how and why they cause big differences, and in the last part, I will talk about something that is not written in the title as a bonus. (For the bonus you\u0026rsquo;ll have to read till the end :D)\nProduction process of ECC Certificate First of all (as always), we need to install the latest updates via the console with the package manager of the Linux version we are in.\nUbuntu: sudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y Fedora: sudo yum update -y Arch Linux: sudo pacman -Syyu After the updates are installed, we start configuring the nginx service (which is the service that allows you to receive external HTTP/HTTPS connections) on your server (Ubuntu in my case). First of all, it should be noted that because of the confusion, apache, nginx and litespeed services are different services that do the same job. I chose NGINX because it is easier to manage and has more community support.\nLet\u0026rsquo;s generate the private key First, we generate the private key with OpenSSL. The OpenSSL command we will use is \u0026rsquo;ecparam\u0026rsquo; (EC parameter manipulation) and to pass the configuration parameters to this command:\nopenssl ecparam -genkey -name secp384r1 -out privkey.pem  The -genkey option tells OpenSSL to generate an EC key. The -name parameter tells OpenSSL which curve to use. The -out parameter tells OpenSSL to write the output to a file.  Note that OpenSSL writes its output in PEM format by default. We can check that OpenSSL is doing the right thing with the ec command that handles EC keys:\nopenssl ec -in privkey.pem -noout -text  -in is input file The -noout tells OpenSSL not to extract the key, meaninglessly printing privkey.pem to stdout. -text tells OpenSSL to write information about the key in plain text format  If all goes well and the key is generated correctly, OpenSSL will show something like the following:\nread EC key Private-Key: (384 bit) priv: [secret] pub: [secret] ASN1 OID: secp384r1 NIST CURVE: P-384 This verifies that the key was created with the P-384 curve. If you ask why we don\u0026rsquo;t use P-512 instead of P-384, Let\u0026rsquo;s Encrypt doesn\u0026rsquo;t sign if the ecliptic curves are higher than 384 bits, and modern browsers like Google Chrome mark websites using 512-bit ecliptic curves as invalid. That\u0026rsquo;s the short answer.\nLet\u0026rsquo;s create OpenSSL configuration for the certificate Now we need to create an OpenSSL configuration file containing the domain-specific parameters for which we want to get the TLS certificate. In this example, we will enter the following configuration in an openssl.cnf file:\n[ req ] prompt = no encrypt_key = no default_md = sha512 distinguished_name = dname req_extensions = reqext [ dname ] CN = example.com emailAddress = admin@example.com [ reqext ] subjectAltName = DNS:example.com, DNS:www.example.com Here is a brief description of these configuration options:\nIn the required [ req ] section:\n prompt=no tells OpenSSL to get as much configuration as possible from the config file encrypt_key = no tells OpenSSL not to encrypt the private key with a password. (Encrypted private keys are supported by Nginx, but I don\u0026rsquo;t use them.) default_md=sha512 tells OpenSSL to sign the CSR with SHA512. (As far as I know, Let\u0026rsquo;s Encrypt only supports RSA with SHA256 for its signatures, but that doesn\u0026rsquo;t mean we can\u0026rsquo;t use stronger encryption in CSR.) distinguished_name=dname tells OpenSSL to look for a [ dname ] section for Distinguished Name configuration options. req_extensions=reqext tells OpenSSL to look for a [ reqext ] section in the configuration options for Subject Alternative Names (SANs) extensions that it wants to configure.  In the Distinguished Name [ dname ] section:\n CN = example.com indicates the Common Name of the certificate. Your emailAddress = admin@example.com email address must be prominent. Desired Extensions In the [ reqext ] section, subjectAltName provides the list of SANs for the certificate. (Chrome as of v58 requires that the Common Name be included in the list of SANs).  Let\u0026rsquo;s Encrypt v2 supports wildcard domains, so in this example you can use a single-level wildcard for non-apex hosts (*.example.com).\nLet\u0026rsquo;s Create Certificate Signing Request The final step on the client side is to generate the Certificate Signing Request using OpenSSL, then we will forward it to Let\u0026rsquo;s Encrypt for signing and retrieve the signed certificate.\nThe OpenSSL command required to generate a CSR is req .\nopenssl req -new -config openssl.cnf -key privkey.pem -out csr.pem  -new tells OpenSSL that we have created a CSR (and we do not examine an existing CSR) -config openssl.cnf specifies the config file we created above -key privkey.pem indicates the private key we created above -out csr.pem tells OpenSSL to write the CSR to an output file (instead of stdout)  We can verify that we have generated the CSR correctly:\nopenssl req -in csr.pem -noout -text -verify  -verify asks OpenSSL to verify the signature in the CSR  This should produce the following expected results in the output:\nverify OK Certificate Request: Data: Version: 1 (0x0) Subject: CN = example.com, emailAddress = admin@example.com Subject Public Key Info: Public Key Algorithm: id-ecPublicKey Public-Key: (384 bit) pub: [gizli] ASN1 OID: secp384r1 NIST CURVE: P-384 Attributes: Requested Extensions: X509v3 Subject Alternative Name: DNS:example.com, DNS:www.example.com Signature Algorithm: ecdsa-with-SHA512 [gizli] Ask Let\u0026rsquo;s Encrypt to sign our certificate The final step is to send the CSR with an ACME client to Let\u0026rsquo;s Encrypt for signing, certbot is the most common client for this job.\nCommand line options passed to the Certbot client depend on our setup, the person our domain is registered to, etc. varies depending. Usually we need to use the certonly command and if you used asterisks (*) you need to use one of the certbot DNS plugins.\nFor example, if the domain example.com is registered with Cloudflare, we can use the corresponding plugin to handle the verification, which is extremely convenient and does not require manual intervention in the process. (Configuring the Cloudflare plugin with secret token information is beyond the scope of this article.)\nIt\u0026rsquo;s usually recommended to make sure everything is ok with --dry-run first to make sure everything is ok.\ncertbot nginx certonly --dry-run --domain \u0026#34;example.com\u0026#34; --domain \u0026#34;www.example.com\u0026#34; --csr csr.pem  Quotation marks are required around characters to avoid erroneous manipulations and are generally a good idea. --csr csr.pem tells certbot that we already have a certificate and we need Let\u0026rsquo;s Encrypt to sign it for us.  The Certbot client will check on the command line that the requested list of domains matches the domains listed in the certificate and will use the Certbot NGINX plugin to verify that the domain is ours and let us know if there are any issues.\nIf nothing is wrong, it will tell you:\nIMPORTANT NOTES: - The dry run was successful. The actual command is just as follows:\ncertbot nginx certonly --domain \u0026#34;example.com\u0026#34; --domain \u0026#34;www.example.com\u0026#34; --csr csr.pem After a (long) delay, the client will output:\n Signed certificate: 0000_cert.pem Root and intermediate certificates: 0000_chain.pem Certificate + intermediates: 0001_chain.pem At this point, the CSR csr.pem can be deleted.  If we are curious, we can inspect the certificates returned by the client with OpenSSL using the x509 command:\nopenssl x509 -in 0001_chain.pem -noout -text Unfortunately, we will discover that as described above, Let\u0026rsquo;s Encrypt signs our certificate with a SHA256 signature. (As well as being more secure, SHA512 outperforms SHA256 on modern 64-bit CPUs.) But our public key should still use ECDSA.\nThese files are not ordinary, so we must move and edit them in a more informative way.\nOn Debian Linux I like to create subdirectories for my domains by keeping my private key in /home/USER_NAME/SSL/private/example.com/privkey.pem and certificates:\n /home/USER_NAME/SSL/certs/example.com/cert.pem /home/USER_NAME/SSL/certs/example.com/chain.pem /home/USER_NAME/SSL/certs/example.com/fullchain.pem  END If we\u0026rsquo;ve done everything right, inspecting the certificate with a web browser like Chrome will confirm that it\u0026rsquo;s an EC certificate:\nMozilla Observatory will also give us an A+ rating!\nIn addition, we can see that a 384-bit ECC certificate was used as a result of the SSL Labs report.\nNOTE: This article has benefited from the article of Benjamin Black on the same subject.\n","permalink":"https://wiseweb.works/en/post/ecc-ssl-sertifikas%C4%B1/","summary":"Introduction and Summary Today we will learn how to generate SSL certificates to ensure that the traffic between a website or application server you manage and your visitors is confidential / reliable and verifiable. In my previous articles, I explained how and with what configuration you would deploy the certificate you produced. In this article, I will show you how to set up the equation of less bread, more meatballs, that is, how to produce a faster and more secure SSL certificate.","title":"Generating ECC SSL Certificate on Linux Server"},{"content":"Increasing SSL security on Linux Servers Today, if you are serving a website and/or App on your current server, I will talk about the SSL connection you need and the openssl library in connection with it. SSL (Secure Socket Layer) and TLS (Transport Layer Security) are a form of connection that allows people who want to connect to your server to communicate securely with your site. There are versions ranging from SSL v1-v3 in the past, and while sites generally use these SSL versions, SSL has now been abandoned by the sites and has been replaced by the more secure TLS. However, we will still need to use the word \u0026ldquo;ssl\u0026rdquo; in the narrative part and while editing the config files. To tell you this with a little humor, have you ever thought why when you want to download the 64 bit version of an application, why it is called \u0026ldquo;amd_64\u0026rdquo;? Because AMD was the first to switch to 64 bit, this naming remained as amd_64 as a sign of respect and/or habit. Likewise, although we are currently using TLS, the naming and configuration parameters remain \u0026ldquo;SSL\u0026rdquo;.\nAs in our previous article, I will explain the process again under three different headings as simple, recommended and advanced. Title contents are gradually considered according to personal requirements. Although the titles are linked to each other, leaving them at a desired stage will not pose a problem.\nSimple configuration First of all, we need to install the updates via the console with the package manager of the Linux version we are in.\nUbuntu: sudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y Fedora: sudo yum update -y Arch Linux: sudo pacman -Syyu After the updates are installed, we start configuring the nginx/apache service (which is the service that allows you to receive external web connections) on your server (Ubuntu in my case). The file where the Nginx service settings are kept is generally located at \u0026ldquo;/etc/nginx/nginx.conf\u0026rdquo;. We need to open it with any of the text editors we use, but with a user with sudo (ie administrator) privileges.\nIf we continue on Ubuntu (Single IP for Single Server Configuration)\nsudo nano /etc/nginx/nginx.config # Command to open the settings file Titles to be added (changed if any) listen 443 ssl http2; \u0026gt;\u0026gt; It serves to meet the requests coming to port 443 via ipv4 with http2 protocol and establish ssl connection. listen [::]:443 ssl http2; \u0026gt;\u0026gt; It serves to meet the requests coming to port 443 over ipv6 with http2 protocol and establish ssl connection. (If you don\u0026#39;t have ipv6 support or you don\u0026#39;t want to support it natively, you can remove it) server_name YOUR SERVER_NAME; \u0026gt;\u0026gt; If you do not want to set your server name as default, you can specify a Server Name Indicator. This only serves to meet the requests coming to your server name instead of meeting all incoming requests. ssl_certificate /etc/letsencrypt/live/YOURSERVER_NAME/fullchain.pem; \u0026gt;\u0026gt; If you are using Let\u0026#39;s Encrypt for free ssl, this is the default certificate location. Otherwise, replace it with your own certificate file. ssl_certificate_key /etc/letsencrypt/live/YOURSERVER_NAME/privkey.pem; \u0026gt;\u0026gt; If you are using Let\u0026#39;s Encrypt for free ssl, this is the default private key location. Otherwise replace it with your own private key file location. ssl_protocols TLSv1.3 TLSv1.2; \u0026gt;\u0026gt; Required command to accept only the latest and most reliable TLS protocols. ssl_prefer_server_ciphers on; \u0026gt;\u0026gt; During the conversation between the server and the client, I guess that they were talking about \u0026#34;ok, let\u0026#39;s see what we have\u0026#34;. In short, if it works for you, if it doesn\u0026#39;t work for you, I don\u0026#39;t talk. ssl_ecdh_curve secp521r1:secp384r1; \u0026gt;\u0026gt; It is the command that tells us which curves we prefer when we need to use ecliptic curves. ssl_ciphers DH-RSA-AES256-SHA:DH-RSA-AES256-SHA256:DHE-RSA-AES256-GCM-SHA384:DH-RSA-AES256-GCM-SHA384:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_PODSADHESA:25_SHA256 -ECDSA-AES256-SHA:ECDH-RSA-AES256-SHA:AECDH-AES256-SHA:ECDHE-ECDSA-AES256-SHA384:ECDH-ECDSA-AES256-SHA384:ECDH-RSA-AES256-SHA384:ECDHE-ECDSA-AES256 -GCM-SHA384:ECDH-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDH-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-CCM:DHE-RSA-AES256-CCM8 :ECDHE-ECDSA-AES256-CCM:ECDHE-ECDSA-AES256-CCM8:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-CHACHA20-POLY1305:DHE-RSA-CHACHA20-POLY1305; \u0026gt;\u0026gt; The code that tells the server to use only those SSL algorithms that I find the most reliable. All ciphers for those who want to research one by one: \u0026ldquo;https://testssl.sh/openssl-iana.mapping.html\u0026quot;\nIf you want to check after making the settings: You can use the command \u0026ldquo;sudo nginx -t\u0026rdquo;. If you do not see an error message, you can apply the settings and restart the service with the command \u0026ldquo;sudo systemctl restart nginx\u0026rdquo; or \u0026ldquo;sudo service nginx restart\u0026rdquo;\nRecommended settings In addition to the previous settings, we will make some performance improvements, as well as some additional configurations that will enable your site to rank higher in SSL test sites. After that, we will make some improvements to ensure that some headers and resources of your site are not exploited by third party sites, which will be beneficial for your site\u0026rsquo;s user access.\nTitles to be added (changed if any) ssl_session_cache shared:TLS:2m; \u0026gt;\u0026gt; Code specifying how TLS connections will be distributed among workers (nginx workers) and for how long the connections will be shared ssl_buffer_size 4k; \u0026gt;\u0026gt; The code that indicates how many containers the packets will be divided into when responding to SSL requests and sending packets after handshake. A lower value means more packets are sent but less overhead. ssl_stapling on; \u0026gt;\u0026gt; Activates the OCSP stapling feature ssl_stapling_verify on; Turns on the ability to verify OCSP stapling, including on parent and root servers. resolver 1.1.1.1 1.0.0.1 2606:4700:4700::1111 2606:4700:4700::1001; \u0026gt;\u0026gt; Enables OCSP stapling verification with Cloudlfare. If you do not use IPV6 or do not want to support it natively, you can delete the IPv6 addresses. add_header X-Content-Type-Options \u0026#34;nosniff\u0026#34; always; \u0026gt;\u0026gt; It is the header value that prevents browsers from sniffing to understand MIME contents. add_header X-Xss-Protection \u0026#34;1; mode=block\u0026#34; always; \u0026gt;\u0026gt; It is a title that prevents the vulnerability to some extent by allowing users to see a white screen in a possible XSS vulnerability. add_header X-Frame-Options \u0026#34;SAMEORIGIN\u0026#34; always; \u0026gt;\u0026gt; It prevents a page of your server from being shown on another page and/or being published one after the other with an i-frame etc. code in any way. Only you can publish a window from your own site within your own site. add_header Referrer-Policy \u0026#34;no-referrer-when-downgrade\u0026#34; always; \u0026gt;\u0026gt; When you redirect or link to a site with lower security measures, it does not automatically add a referrer header and it is not clear that traffic is coming from your site. add_header Content-Security-Policy \u0026#34;default-src \u0026#39;self\u0026#39; https: data: \u0026#39;unsafe-inline\u0026#39; \u0026#39;unsafe-eval\u0026#39;;\u0026#34; always; \u0026gt;\u0026gt; The title that regulates the conditions under which requests that you and other users can call from outside can be called. By default, I trust some sources that come over https. add_header Permissions-Policy \u0026#34;camera=(), fullscreen=(self), geolocation=(), microphone=(), payment=()\u0026#34; always; \u0026gt;\u0026gt; It prevents the collection of information on your site with various types of poisoning (cache-poisoning or js-poisoning) by specifying which permissions you will want to the browser or which you will not need at all. If you want to check after making the settings: You can use the command \u0026ldquo;sudo nginx -t\u0026rdquo;. If you do not see an error message, you can apply the settings and restart the service with the command \u0026ldquo;sudo systemctl restart nginx\u0026rdquo; or \u0026ldquo;sudo service nginx restart\u0026rdquo;.\nAdvanced Settings First, we\u0026rsquo;ll add a header to your site to indicate that it should only be connected via ssl. In this way, those who have entered your site before and those who already have this title in their browser will not be able to access your site non-SSL even if they want it. Then we will staple the SSL certificates that should be used in HTTP sessions, and we will specify in advance which certificates will need to be connected next to the previous method. In this way, even if you are an authorized top certificate manager or root manager, they will not be able to connect to your site with the certificate signed on your behalf. E-Tugra Root Certificate provider residing in Turkey at the time signed a certificate to *.google.com. If you do a little research, you\u0026rsquo;ll find out when it happened and why (how bad it could cause). Now let\u0026rsquo;s start the final configuration part.\nFirst, make sure that your site can be accessed over SSL without causing any problems. Then add one of the following headers to the nginx config file as per your request. But beware, only one.\nadd_header Strict-Transport-Security \u0026#34;max-age=2592000;\u0026#34; always; \u0026gt;\u0026gt; Header stating that your site can only be accessed over HTTPS for 30 days. (Not including subdomains) add_header Strict-Transport-Security \u0026#34;max-age=2592000; includeSubDomains;\u0026#34; always; \u0026gt;\u0026gt; Header stating that your site can only be accessed over HTTPS for 30 days, including subdomains. add_header Strict-Transport-Security \u0026#34;max-age=31536000; includeSubDomains;\u0026#34; always; \u0026gt;\u0026gt; Header stating that your site can only be accessed over HTTPS for 1 year, including subdomains. add_header Strict-Transport-Security \u0026#34;max-age=31536000; includeSubDomains; preload\u0026#34; always; \u0026gt;\u0026gt; The header that instructs that your site can only be accessed over HTTPS for 1 year, including subdomains, and that this header is cached by browsers. In addition, new browsers will be aware of this title even if they have never visited your site before. add_header Strict-Transport-Security \u0026#34;max-age=0; includeSubDomains\u0026#34;; \u0026gt;\u0026gt; Title for removing HSTS feature and preload list membership completely. After adding the header mentioned above, now it\u0026rsquo;s time to staple the hash of the ssl certificate you used to the HTTP session. At this stage we need to extract a hash of your current certificate, hash the top signing authority\u0026rsquo;s certificate, and continue this hashing process until we\u0026rsquo;ve completed the entire chain, including the top root certificate authority. For this reason, we run the following commands respectively with a root user or a user with sudo authority. (The lecture was made specifically for Let\u0026rsquo;s Encrypt.)\n1] cat /etc/letsencrypt/live/YOUR SERVER_NAME/cert.pem | openssl x509 -pubkey | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64 \u0026gt;\u0026gt; This command will extract the hash of your site\u0026#39;s certificate. Copy the result value somewhere. 2] curl -s https://letsencrypt.org/certs/lets-encrypt-x4-cross-signed.pem | openssl x509 -pubkey | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64 \u0026gt;\u0026gt; This command will extract one of the multi-signed certificates of letsencrypt. 3] curl -s https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem | openssl x509 -pubkey | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64 \u0026gt;\u0026gt; This command will extract one of the multi-signed certificates of letsencrypt. 4] curl -s https://letsencrypt.org/certs/isrgrootx1.pem | openssl x509 -pubkey | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64 \u0026gt;\u0026gt; This command will extract the root (top) certificate of letsencrypt. The following value is added to the Nginx config file 5] add_header Public-Key-Pins \u0026#39;pin-sha256=\u0026#34;FIRST_RESULT\u0026#34;; pin-sha256=\u0026#34;SECOND_RESULT\u0026#34;; pin-sha256=\u0026#34;TIP_END\u0026#34;; pin-sha256=\u0026#34;FINISH_RESULT\u0026#34;; max-age=2592000; includeSubDomains\u0026#39; always; \u0026gt;\u0026gt; Allows you to connect to your site for 30 days only with the specified certificate. You can optionally increase the max-age value. Before your certificate validity period is less than 30 days, you must disable the header or obtain a new certificate and add it as the fifth value. As a bonus, I\u0026#39;d like to show you another command that will take a long time for your server to execute, but is very useful. 6] openssl dhparam -out /etc/nginx/dhparams.pem 4096 \u0026gt;\u0026gt; This command can take between 15 minutes and 1 hour to execute. After the process is finished, you need to add the following command to the nginx config file. ssl_dhparam /etc/nginx/dhparam.pem; \u0026gt;\u0026gt; The command to change the values ​​to be used during the Diffie-Hellman key exchange algorithm with the secret values ​​we just created, apart from the default values. After making the settings, apply the settings with the command \u0026ldquo;sudo nginx -t\u0026rdquo; and then, if you do not see an error message, \u0026ldquo;sudo service nginx restart\u0026rdquo; and restart the service. Now the connection will be provided with the configuration and conditions you have specified. If you want to see the before/after scoring difference, you can look at the images below or test your own site at \u0026ldquo;https://www.ssllabs.com/ssltest/index.html\u0026quot;.\nBEFORE AFTER If you ask why Cipher Strength is not 100%, it is not possible to make 100% at the moment because of the \u0026ldquo;TLS_AES_128_GCM_SHA256 (0x1301)\u0026rdquo; that comes automatically with TLS 1.3 and is added even if we don\u0026rsquo;t want it. If you think that I will turn off TLS 1.3, then it will not come, then unfortunately your points are gone from somewhere else.\nEnd This article was previously published at https://teknolojirehberleri.xyz. In order to create a personal portfolio, I felt the need to republish it on my personal site.\n","permalink":"https://wiseweb.works/en/post/ssl-konfigurasyonu/","summary":"Increasing SSL security on Linux Servers Today, if you are serving a website and/or App on your current server, I will talk about the SSL connection you need and the openssl library in connection with it. SSL (Secure Socket Layer) and TLS (Transport Layer Security) are a form of connection that allows people who want to connect to your server to communicate securely with your site. There are versions ranging from SSL v1-v3 in the past, and while sites generally use these SSL versions, SSL has now been abandoned by the sites and has been replaced by the more secure TLS.","title":"Increasing SSL security on Linux Servers"},{"content":"Increasing SSH security on Linux Servers Today, I will talk about how we can keep the SSH service, which allows us to connect securely when you rent a server, more secure and away from malicious requests from outside. Foremost, I will describe the process under three different headings: simple, recommended and advanced. Title contents are gradually considered according to personal requirements. Although the titles are linked to each other, leaving them at a desired stage will not pose a problem.\nSimple Safety Precautions First, we need to install the updates via the console with the package manager of the Linux version we are in.\nUbuntu: sudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y Fedora: sudo yum update -y Arch Linux: sudo pacman -Syyu After the updates are installed, we start configuring the SSHD service (which is the service that allows you to receive ssh connections from outside) on your server (Ubuntu in my case). Foremost, due to the confusion, it should be noted that the ssh service and the SSHD service are different services. While the SSH service is the service that connects the server to other computers or servers, the SSHD service is the service that allows other computers to connect to your server, that is, incoming connections.\nThe file that keeps the settings of the SSHD service is generally located at “/etc/ssh/sshd_config”. We need to open it with any of the text editors we use, but with a user with sudo (ie administrator) privileges.\nIf we continue on, Ubuntu\nsudo nano /etc/ssh/sshd_config # Command to open the settings file Titles we will find and replace\n#ClientAliveInterval 0 \u0026gt;\u0026gt; We remove the hashtag at the beginning and change the value from \u0026#34;0\u0026#34; to 300. This command regulates the automatic closing of the connection after how many seconds when the connection is not used (it stays in the idle position). #PermitEmptyPasswords no \u0026gt;\u0026gt; We remove the hashtag at the beginning and do not change the \u0026#34;no\u0026#34; value. This command prevents blank or unencrypted users from connecting. So it doesn\u0026#39;t allow empty passwords. X11Forwarding yes \u0026gt;\u0026gt; If there is a hashtag at the beginning, we remove it, otherwise we change the \u0026#34;yes\u0026#34; value to no. Although this command provides ease of running applications with GUI interface on the server, we close it because it is possible to abuse it. #MaxAuthTries 6 \u0026gt;\u0026gt; We remove the hashtag at the beginning and change the value from \u0026#34;6\u0026#34; to 3. This command regulates how many times they can try your password. The number 6 is an unnecessarily high value and the general acceptance is 3 or 4. #Protocol 2 \u0026gt;\u0026gt; If there is a hashtag at the beginning, we remove it, if there is no such record, we add the value in the form of \u0026#34;Protocol 2\u0026#34; to the first space we find. This command ensures that connections are made only with the latest SSH protocol, protecting you from vulnerabilities of the old protocol. If you want to check after making the settings: You can use the command \u0026ldquo;sudo sshd -t\u0026rdquo;. If you do not see an error message, you can apply the settings and restart the service with the command \u0026ldquo;sudo systemctl restart sshd\u0026rdquo; or \u0026ldquo;sudo service sshd restart\u0026rdquo;\nRecommended settings In addition to the previous settings, we will make additional settings such as user-based login, login using only secure key and restrict login with Root user. First you need to generate a secret key for your user on your local computer. For this, if you are using a linux-based operating system\nAfter typing ssh-keygen -t rsa -b 4096 #, enter the password you want in response to the questions below \u0026gt;\u0026gt;\u0026gt;\u0026gt; Enter passphrase (empty for no passphrase): [Press enter key] \u0026gt;\u0026gt;\u0026gt;\u0026gt; Enter same passphrase again: [Press enter key] or ssh-keygen -t ecdsa -b 521 # Generates more secure and faster ecliptic key. Enter the password you want in response to the questions below \u0026gt;\u0026gt;\u0026gt;\u0026gt; Enter passphrase (empty for no passphrase): [Press enter key] \u0026gt;\u0026gt;\u0026gt;\u0026gt; Enter same passphrase again: [Press enter key] If you answered other questions by pressing Enter and did not type a specific location for the key, your key pair (.pub= public key) / private key without extension) is saved in the /home/USER_NAME/.ssh folder. You can use the code below to introduce the key you generated to your server.\nssh-copy-id -i ~/.ssh/KEY_NAME.pub After typing USER_NAME@SERVER_IP_ADRESS # on the SERVER, it will ask for your user\u0026#39;s password and if you enter it correctly, you will see a confirmation message. After generating your own key, to access the server only with the key; Titles we will find and replace\n#PasswordAuthentication no \u0026gt;\u0026gt; We remove the hashtag at the beginning and leave the \u0026#34;no\u0026#34; value as no. This command prevents connecting to the server with a password. Users can only connect with ssh_keys. PubkeyAuthentication yes \u0026gt;\u0026gt; If there is, we remove the hash mark at the beginning and set the value as yes. This command is the command that allows you to log in with the secret key you just created. #PermitRootLogin no \u0026gt;\u0026gt; We remove the hashtag at the beginning and leave the \u0026#34;no\u0026#34; value as no. This command prevents the ROOT user, who is the most authorized user, from accessing the server. However, you can access it with another user and then switch to the ROOT user. AllowUsers YOUR USERNAME \u0026gt;\u0026gt; If it doesn\u0026#39;t exist, we add such a record. It prevents other users from connecting to the server and/or attempting a username. LoginGraceTime 20 \u0026gt;\u0026gt; If not, we add such a record and set the value to 20. Determines the time required to log in, in seconds. We prevent them from keeping the server busy with a long login request. ChallengeResponseAuthentication no \u0026gt;\u0026gt; If there is, we remove the hash mark at the beginning and set the value as no. This command disables other login methods. KerberosAuthentication no \u0026gt;\u0026gt; If there is, we remove the hash mark at the beginning and set the value as no. This command disables other login methods. GSSAPIAuthentication no \u0026gt;\u0026gt; If there is, we remove the hash mark at the beginning and set the value as no. This command disables other login methods. If you want to check after making the settings: You can use the command \u0026ldquo;sudo sshd -t\u0026rdquo;. If you do not see an error message, you can apply the settings and restart the service with the command \u0026ldquo;sudo systemctl restart sshd\u0026rdquo; or \u0026ldquo;sudo service sshd restart\u0026rdquo;\nAdvanced Settings First of all, we will change the standard SSH connection port, 22, and then make the encryption tools used during SSH connection even stronger. Then we will determine how the logs (registry records) of the server SSH service are kept.\nTitles we will find and replace\n#Port 22 \u0026gt;\u0026gt; We find this and remove the hash mark at the beginning and write there a port number that is not used by any other service and is open. For example, it could be 2992. LogLevel INFO \u0026gt;\u0026gt; We find this setting and change it, if not, we add it. It helps us to set the recording level. AllowAgentForwarding no \u0026gt;\u0026gt; We find this setting and change it, if not, we add it. Disables alternative routing methods. AllowTcpForwarding no \u0026gt;\u0026gt; We find this setting and change it, if not, we add it. Disables alternative routing methods. PrintMotd no \u0026gt;\u0026gt; We find this setting and change it, if not, we add it. To prevent them from knowing about the server before the connection is established. PermitUserEnvironment no \u0026gt;\u0026gt; We find this setting and change it, if not, we add it. PermitTunnel no \u0026gt;\u0026gt; We find this setting and change it, if not, we add it. We go further and determine which of the encryption algorithms, authentication algorithms, key exchange algorithms and other algorithms used during the SSH connection should be the default.\nWe run the following commands respectively with a root user or a user with sudo authority.\n1] rm /etc/ssh/ssh_host_* 2] ssh-keygen -t rsa -b 4096 -f /etc/ssh/ssh_host_rsa_key -N \u0026#34;\u0026#34; 3] ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -N \u0026#34;\u0026#34; 4] awk \u0026#39;$5 \u0026gt;= 3072\u0026#39; /etc/ssh/moduli \u0026gt; /etc/ssh/moduli.tmp 5] mv /etc/ssh/moduli.tmp /etc/ssh/moduli 6] sed -i \u0026#39;s/^\\#HostKey \\/etc\\/ssh\\/ssh_host_\\(rsa\\|ed25519\\)_key$/HostKey \\/etc\\/ssh\\/ssh_host_\\1_key/g\u0026#39; /etc/ssh/sshd_config 7] echo -e \u0026#34;KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com\\nHostKeyAlgorithms ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,sk-ssh-ed25519-cert-v01@openssh.com,rsa-sha2-256,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com\u0026#34; \u0026gt; /etc/ssh/sshd_config.d/ssh-hardening.conf After making the settings, apply the settings with the command \u0026ldquo;sudo sshd -t\u0026rdquo; and then, if you do not see an error message, \u0026ldquo;sudo service sshd restart\u0026rdquo; and restart the service. Now you will be able to connect to the server via the port you have just defined and only with your private key. To connect;\nYou can use the command ssh -i ~/.ssh/KEY_NAME USER_NAME@SERVER_IP_ADRESS -p PORT_NUMBER #. You can continue by saying Enter to the incoming notifications. End This article was previously published at https://teknolojirehberleri.xyz. In order to create a personal portfolio, I felt the need to republish it on my personal site.\n","permalink":"https://wiseweb.works/en/post/ssh-guvenligi/","summary":"Increasing SSH security on Linux Servers Today, I will talk about how we can keep the SSH service, which allows us to connect securely when you rent a server, more secure and away from malicious requests from outside. Foremost, I will describe the process under three different headings: simple, recommended and advanced. Title contents are gradually considered according to personal requirements. Although the titles are linked to each other, leaving them at a desired stage will not pose a problem.","title":"Increasing SSH security on Linux Servers"}]